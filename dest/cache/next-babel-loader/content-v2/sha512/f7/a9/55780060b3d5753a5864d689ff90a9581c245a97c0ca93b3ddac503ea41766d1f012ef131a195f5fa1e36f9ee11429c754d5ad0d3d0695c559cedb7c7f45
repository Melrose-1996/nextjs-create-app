{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/pc/Desktop/\\u6155\\u8BFE\\u5B66\\u4E60/nextjs-create-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/pc/Desktop/\\u6155\\u8BFE\\u5B66\\u4E60/nextjs-create-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _Tabs from \"antd/lib/tabs\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _Button from \"antd/lib/button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _JSXStyle from \"styled-jsx/style\";\n\nvar api = require(\"../lib/api\");\n\nimport { MailOutlined } from \"@ant-design/icons\";\nimport { connect } from \"react-redux\";\nimport getConfig from \"next/config\";\n\nvar _getConfig = getConfig(),\n    publicRuntimeConfig = _getConfig.publicRuntimeConfig;\n\nimport Repo from \"../components/Repo\"; // 存储 tabs 栏的状态,以参数的形式传递下去\n\nimport Router, { withRouter } from \"next/router\";\nimport { useEffect } from \"react\"; // 加入缓存策略\n\nimport LRU from \"lru-cache\";\nimport { setCache } from \"../lib/repo-basic-cache\";\nvar cache = new LRU({\n  // 表示最长的事件不去使用缓存在里面 key 的数据，就会把该数据删除\n  maxAge: 1000 * 60 * 10\n}); // const Index = ({ Component, pageProps, reduxStore }) => {\n//   // console.log(isLogin);\n//   // console.log(userRepos);\n//   // console.log(userStaredRepos);\n//   return <span>去登录</span>;\n// };\n// 用于存储传递过来的数据\n// 注意：这个是在模块的全局作用域里面的，会一直存在的，永远都会有值\n// 所以对于服务端渲染，我们需要做层判断，不应该使用这个全局变量的值\n\nvar userLocalRepos, userLocalStaredRepos;\nvar userFlag;\nvar isServer = false;\n\nfunction Index(_ref) {\n  var userRepos = _ref.userRepos,\n      userStaredRepos = _ref.userStaredRepos,\n      user = _ref.user,\n      router = _ref.router;\n  var tabKey = router.query.key || \"1\";\n\n  var handelTabChange = function handelTabChange(activeKey) {\n    Router.push(\"/?key=\".concat(activeKey));\n  }; // 第一进来的时候，如果请求的有数据，就应该把数据缓存起来了\n  // 如果不传递参数，则之后在 mounted 的时候调用一次\n\n\n  useEffect(function () {\n    if (!isServer) {\n      // 防止值为 null 的时候也缓存\n      // if (userRepos) {\n      //   cache.set(\"userRepos\", userRepos);\n      // }\n      // if (userStaredRepos) {\n      //   cache.set(\"userStaredRepos\", userStaredRepos);\n      // }\n      // 这种方法是不管有没有发起请求获取到数据，一到时间就会刷新数据\n      userLocalRepos = userRepos;\n      userLocalStaredRepos = userStaredRepos;\n      setTimeout(function () {\n        userLocalRepos = null;\n        userLocalStaredRepos = null;\n      }, 1000 * 60 * 10);\n    }\n  }, [userRepos, userStaredRepos]);\n\n  if (!user || !user.id) {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: \"jsx-3088588873\" + \" \" + \"root\",\n      children: [/*#__PURE__*/_jsx(\"p\", {\n        className: \"jsx-3088588873\",\n        children: \"\\u4EB2\\uFF0C\\u60A8\\u8FD8\\u6CA1\\u6709\\u767B\\u5F55\\u54E6~\"\n      }), /*#__PURE__*/_jsx(_Button, {\n        type: \"primary\",\n        href: publicRuntimeConfig.OAUTH_URL,\n        children: \"\\u70B9\\u51FB\\u767B\\u5F55\"\n      }), /*#__PURE__*/_jsx(_JSXStyle, {\n        id: \"3088588873\",\n        children: [\".root.jsx-3088588873{height:400px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}\"]\n      })]\n    });\n  }\n\n  useEffect(function () {\n    // 服务端渲染对于这段代码是没有必要去执行的，如果重复执行会导致我们的内存没有意义的使用，这段是跟用户的搜索有关的，跟服务端整体渲染是没有关系的，所以需要屏蔽掉。\n    if (!isServer) {\n      setCache(userRepos);\n      setCache(userStaredRepos);\n    }\n  });\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"jsx-4069790378\" + \" \" + \"root\",\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: \"jsx-4069790378\" + \" \" + \"user-info\",\n      children: [/*#__PURE__*/_jsx(\"img\", {\n        src: user.avatar_url,\n        alt: \"user avatar\",\n        className: \"jsx-4069790378\" + \" \" + \"avatar\"\n      }), /*#__PURE__*/_jsx(\"span\", {\n        className: \"jsx-4069790378\" + \" \" + \"login\",\n        children: user.login || \"--\"\n      }), /*#__PURE__*/_jsx(\"span\", {\n        className: \"jsx-4069790378\" + \" \" + \"name\",\n        children: user.name || \"--\"\n      }), /*#__PURE__*/_jsx(\"span\", {\n        className: \"jsx-4069790378\" + \" \" + \"bio\",\n        children: user.bio || \"--\"\n      }), /*#__PURE__*/_jsxs(\"p\", {\n        className: \"jsx-4069790378\" + \" \" + \"email\",\n        children: [/*#__PURE__*/_jsx(MailOutlined, {\n          style: {\n            marginRight: 10\n          }\n        }), /*#__PURE__*/_jsx(\"a\", {\n          href: \"mailto:\".concat(user.email),\n          className: \"jsx-4069790378\",\n          children: user.email || \"--\"\n        })]\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: \"jsx-4069790378\" + \" \" + \"user-repos\",\n      children: /*#__PURE__*/_jsxs(_Tabs, {\n        activeKey: tabKey,\n        onChange: handelTabChange,\n        animated: false,\n        children: [/*#__PURE__*/_jsx(_Tabs.TabPane, {\n          tab: \"\\u4F60\\u7684\\u4ED3\\u5E93\",\n          children: userRepos.map(function (repo) {\n            return /*#__PURE__*/_jsx(Repo, {\n              repo: repo\n            }, repo.id);\n          })\n        }, \"1\"), /*#__PURE__*/_jsx(_Tabs.TabPane, {\n          tab: \"\\u4F60\\u5173\\u6CE8\\u7684\\u4ED3\\u5E93\",\n          children: userStaredRepos.map(function (repo) {\n            return /*#__PURE__*/_jsx(Repo, {\n              repo: repo\n            }, repo.id);\n          })\n        }, \"2\")]\n      })\n    }), /*#__PURE__*/_jsx(_JSXStyle, {\n      id: \"4069790378\",\n      children: [\".root.jsx-4069790378{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:20px 0;}\", \".user-info.jsx-4069790378{width:200px;margin-right:40px;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}\", \".login.jsx-4069790378{font-weight:800;font-size:20px;margin-top:20px;}\", \".name.jsx-4069790378{margin-top:20px;color:#333;}\", \".bio.jsx-4069790378{margin-top:20px;color:#333;}\", \".avatar.jsx-4069790378{width:100%;border-radius:5px;}\", \".user-repos.jsx-4069790378{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}\"]\n    })]\n  });\n} // 注意我们在组件中（getInitialProps）中，只会使用到 request ，因为 request 会帮助我们去判断是客户端还是服务端\n// 注意 getInitialProps 会在客户端不同页面跳转的时候使用，同样服务端如果我们访问的是 index 这个页面，也会调用 getInitialProps，在服务端渲染的时候调用的时候，我们的运行环境处于 node.js 环境，而不是浏览器的环境，如果我们在 node.js 的环境下请求就会出现请求的是 http://localhost:3000/ 这样的地址，所以会失败（默认的端口是80）\n// 注意这里是 ctx 而不是 {ctx}\n\n\nIndex.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var userRepos, userStaredRepos;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!userFlag || !userFlag.id)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {});\n\n          case 2:\n            if (isServer) {\n              _context.next = 5;\n              break;\n            }\n\n            if (!(userLocalRepos && userLocalStaredRepos)) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              userRepos: userLocalRepos,\n              userStaredRepos: userLocalStaredRepos\n            });\n\n          case 5:\n            _context.next = 7;\n            return api.request({\n              url: \"/user/repos\"\n            }, ctx.req, ctx.res);\n\n          case 7:\n            userRepos = _context.sent;\n            _context.next = 10;\n            return api.request({\n              url: \"/gists/starred\"\n            }, ctx.req, ctx.res);\n\n          case 10:\n            userStaredRepos = _context.sent;\n            return _context.abrupt(\"return\", {\n              isLogin: true,\n              userRepos: userRepos.data,\n              userStaredRepos: userStaredRepos.data\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}(); // 注意在写 withRouter 和 connect 的时候，需要把 withRouter 放在外面\n\n\nexport default withRouter(connect(function mapState(state) {\n  userFlag = state.user;\n  return {\n    user: state.user\n  };\n})(Index));","map":null,"metadata":{},"sourceType":"module"}