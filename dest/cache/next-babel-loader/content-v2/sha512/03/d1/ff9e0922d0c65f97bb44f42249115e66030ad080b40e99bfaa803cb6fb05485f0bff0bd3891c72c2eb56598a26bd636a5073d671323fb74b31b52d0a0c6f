{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport createStore from \"../store/store\"; // 用于判断是否处于 window 的环境\n\nconst isServer = true;\nconst __NEXT_REUDEX_STORE__ = \"__NEXT_REUDEX_STORE__\"; // 创建 store 的方法\n\nfunction getOrCreateStore(initialState) {\n  // 服务端的情况\n  if (isServer) {\n    return createStore(initialState);\n  } // 不是服务端的情况\n\n\n  if (!window[__NEXT_REUDEX_STORE__]) {\n    window[__NEXT_REUDEX_STORE__] = createStore(initialState);\n  }\n\n  return window[__NEXT_REUDEX_STORE__];\n}\n\nexport default (Comp => {\n  class WithReduxApp extends React.Component {\n    constructor(props) {\n      super(props);\n      this.reduxStore = getOrCreateStore(props.initialReduxState);\n    }\n\n    render() {\n      const _this$props = this.props,\n            {\n        Component,\n        pageProps\n      } = _this$props,\n            rest = _objectWithoutProperties(_this$props, [\"Component\", \"pageProps\"]);\n\n      console.log(Component, pageProps);\n\n      if (pageProps) {\n        pageProps.test = \"123\";\n      }\n\n      return /*#__PURE__*/_jsx(Comp, _objectSpread(_objectSpread({\n        Component: Component,\n        pageProps: pageProps\n      }, rest), {}, {\n        reduxStore: this.reduxStore\n      }));\n    }\n\n  }\n\n  WithReduxApp.getInitialProps = async ctx => {\n    // 我们需要创建一个 store\n    let reduxStore;\n\n    if (isServer) {\n      const {\n        req\n      } = ctx.ctx;\n      const session = req.session;\n\n      if (session && session.userInfo) {\n        reduxStore = getOrCreateStore({\n          user: session.userInfo\n        });\n      } else {\n        reduxStore = getOrCreateStore();\n      }\n    } else {\n      reduxStore = getOrCreateStore();\n    } // 初始化 store\n    // const reduxStore = getOrCreateStore();\n\n\n    ctx.reduxStore = reduxStore;\n    let appProps = {};\n\n    if (typeof Comp.getInitialProps === \"function\") {\n      appProps = await Comp.getInitialProps(ctx);\n    }\n\n    return _objectSpread(_objectSpread({}, appProps), {}, {\n      initialReduxState: reduxStore.getState()\n    });\n  };\n\n  return WithReduxApp;\n});","map":null,"metadata":{},"sourceType":"module"}