{"ast":null,"code":"// // 专门处理 getInitalProps 请求接口功能的相关函数\n// // 由于在客户端执行又要在服务端执行，所以不直接使用 exports 这语法，在 ndoe.js 目前不支持\n// const axios = require(\"axios\");\n// const github_base_url = \"https://api.github.com\";\n// // 这个方法就是单纯的向服务端发起请求的方法\n// async function requestGithub(method, url, data, headers) {\n//   return await axios({\n//     url: `${github_base_url}${url}`,\n//     method,\n//     data,\n//     headers,\n//   });\n// }\n// // 服务端\n// const isServer = typeof window === \"undefined\";\n// async function request({ method = \"GET\", url, data = {} }, req, res) {\n//   if (!url) {\n//     throw Error(\"url must provide\");\n//   }\n//   if (isServer) {\n//     // 服务端\n//     console.log(req, 111);\n//     const { session } = req;\n//     const githubAuth = session.githubAuth || {};\n//     // 请求 github 数据\n//     const headers = {};\n//     if (githubAuth.access_token) {\n//       headers[\n//         \"Authorization\"\n//       ] = `${githubAuth.token_type} ${githubAuth.access_token}`;\n//     }\n//     return await requestGithub(method, url, data, headers);\n//   } else {\n//     // 客户端 - 我们是需要请求自己的服务的，我们自己的服务对于 URL 也会进行处理\n//     // /search/repositories?q=react => /github/search/repositories?q=react\n//     // 这样我们服务端通过判断 /github 开头的这个请求的地址进行一个特殊的处理\n//     return await axios({\n//       url: `/github${url}`,\n//       method,\n//       data,\n//     });\n//   }\n// }\n// module.exports = {\n//   request,\n//   requestGithub,\n// };","map":{"version":3,"sources":["D:/lls/chenzhengquan/Desktop/muke-study/nextjs-create-app/lib/api.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["// // 专门处理 getInitalProps 请求接口功能的相关函数\r\n// // 由于在客户端执行又要在服务端执行，所以不直接使用 exports 这语法，在 ndoe.js 目前不支持\r\n\r\n// const axios = require(\"axios\");\r\n\r\n// const github_base_url = \"https://api.github.com\";\r\n\r\n// // 这个方法就是单纯的向服务端发起请求的方法\r\n// async function requestGithub(method, url, data, headers) {\r\n//   return await axios({\r\n//     url: `${github_base_url}${url}`,\r\n//     method,\r\n//     data,\r\n//     headers,\r\n//   });\r\n// }\r\n\r\n// // 服务端\r\n// const isServer = typeof window === \"undefined\";\r\n// async function request({ method = \"GET\", url, data = {} }, req, res) {\r\n//   if (!url) {\r\n//     throw Error(\"url must provide\");\r\n//   }\r\n\r\n//   if (isServer) {\r\n//     // 服务端\r\n//     console.log(req, 111);\r\n//     const { session } = req;\r\n//     const githubAuth = session.githubAuth || {};\r\n//     // 请求 github 数据\r\n//     const headers = {};\r\n//     if (githubAuth.access_token) {\r\n//       headers[\r\n//         \"Authorization\"\r\n//       ] = `${githubAuth.token_type} ${githubAuth.access_token}`;\r\n//     }\r\n//     return await requestGithub(method, url, data, headers);\r\n//   } else {\r\n//     // 客户端 - 我们是需要请求自己的服务的，我们自己的服务对于 URL 也会进行处理\r\n//     // /search/repositories?q=react => /github/search/repositories?q=react\r\n//     // 这样我们服务端通过判断 /github 开头的这个请求的地址进行一个特殊的处理\r\n//     return await axios({\r\n//       url: `/github${url}`,\r\n//       method,\r\n//       data,\r\n//     });\r\n//   }\r\n// }\r\n\r\n// module.exports = {\r\n//   request,\r\n//   requestGithub,\r\n// };\r\n"]},"metadata":{},"sourceType":"script"}