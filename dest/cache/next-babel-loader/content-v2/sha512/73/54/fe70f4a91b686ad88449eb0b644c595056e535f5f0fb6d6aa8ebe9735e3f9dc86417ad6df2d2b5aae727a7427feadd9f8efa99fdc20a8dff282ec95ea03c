{"ast":null,"code":"var _regeneratorRuntime = require(\"C:/Users/pc/Desktop/\\u6155\\u8BFE\\u5B66\\u4E60/nextjs-create-app/node_modules/next/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/pc/Desktop/\\u6155\\u8BFE\\u5B66\\u4E60/nextjs-create-app/node_modules/next/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\n// 专门处理 getInitalProps 请求接口功能的相关函数\n// 由于在客户端执行又要在服务端执行，所以不直接使用 exports 这语法，在 ndoe.js 目前不支持\nvar axios = require(\"axios\");\n\nvar github_base_url = \"https://api.github.com\"; // 这个方法就是单纯的向服务端发起请求的方法\n\nfunction requestGithub(_x, _x2, _x3, _x4) {\n  return _requestGithub.apply(this, arguments);\n} // 服务端\n\n\nfunction _requestGithub() {\n  _requestGithub = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(method, url, data, headers) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios({\n              url: \"\".concat(github_base_url).concat(url),\n              method: method,\n              data: data,\n              headers: headers\n            });\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _requestGithub.apply(this, arguments);\n}\n\nvar isServer = false;\n\nfunction request(_x5, _x6, _x7) {\n  return _request.apply(this, arguments);\n}\n\nfunction _request() {\n  _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref, req, res) {\n    var _ref$method, method, url, _ref$data, data, session, githubAuth, headers;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _ref$method = _ref.method, method = _ref$method === void 0 ? \"GET\" : _ref$method, url = _ref.url, _ref$data = _ref.data, data = _ref$data === void 0 ? {} : _ref$data;\n\n            if (url) {\n              _context2.next = 3;\n              break;\n            }\n\n            throw Error(\"url must provide\");\n\n          case 3:\n            if (!isServer) {\n              _context2.next = 13;\n              break;\n            }\n\n            // 服务端\n            session = req.session;\n            githubAuth = session.githubAuth || {}; // 请求 github 数据\n\n            headers = {};\n\n            if (githubAuth.access_token) {\n              headers[\"Authorization\"] = \"\".concat(githubAuth.token_type, \" \").concat(githubAuth.access_token);\n            }\n\n            _context2.next = 10;\n            return requestGithub(method, url, data, headers);\n\n          case 10:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 13:\n            _context2.next = 15;\n            return axios({\n              url: \"/github\".concat(url),\n              method: method,\n              data: data\n            });\n\n          case 15:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _request.apply(this, arguments);\n}\n\nmodule.exports = {\n  request: request,\n  requestGithub: requestGithub\n};","map":null,"metadata":{},"sourceType":"script"}