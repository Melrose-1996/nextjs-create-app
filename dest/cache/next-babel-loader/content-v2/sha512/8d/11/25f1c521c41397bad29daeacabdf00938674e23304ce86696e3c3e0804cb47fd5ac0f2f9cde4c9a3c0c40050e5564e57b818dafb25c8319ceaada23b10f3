{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\\\u6155\\u8BFE\\u5B66\\u4E60\\\\nextjs-create-app\\\\pages\\\\index.js\";\nimport axios from \"axios\";\n\nconst api = require(\"../lib/api\");\n\nimport { connect } from \"react-redux\";\nlet user;\n\nconst Index = ({\n  userRepos,\n  userStaredRepos,\n  isLogin\n}) => {\n  console.log(isLogin);\n  console.log(userRepos);\n  console.log(userStaredRepos);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"\\u53BB\\u767B\\u5F55\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 10\n  }, this);\n}; // 注意我们在组件中（getInitialProps）中，只会使用到 request ，因为 request 会帮助我们去判断是客户端还是服务端\n// 注意 getInitialProps 会在客户端不同页面跳转的时候使用，同样服务端如果我们访问的是 index 这个页面，也会调用 getInitialProps，在服务端渲染的时候调用的时候，我们的运行环境处于 node.js 环境，而不是浏览器的环境，如果我们在 node.js 的环境下请求就会出现请求的是 http://localhost:3000/ 这样的地址，所以会失败（默认的端口是80）\n// 注意这里是 ctx 而不是 {ctx}\n\n\nIndex.getInitialProps = async appContext => {\n  if (!user) {\n    return {\n      isLogin: false\n    };\n  }\n\n  console.log(22222222222); // 报 Error: connect ECONNREFUSED 127.0.0.1:80 的错误\n  // 如果是在浏览器里面发送的，会根据我们提供的路径会自动加上我们当前网站的域名（就是http://localhost:3000/）所以它完整请求路径就是 http://localhost:3000/github/search/repositories?q=react\n  // 如果是在服务端渲染的时候进行执行的话，所以没有浏览器里面的域名的，这个时候请求的路径自动在 axios 里面增加的 http://127.0.0.1（默认80端口）/github/search/repositories?q=react，这个时候就不对了，我们 80 端口没有启动，也不是我们想请求的地址\n  // const result = await axios\n  //   .get(\"/github/search/repositories?q=react\")\n  //   .then((resp) => console.log(resp));\n  // 注意 req 和 res 只有在服务端渲染的时候才会有\n  // 注意一旦登出了，我们需要做个请求的判断\n  // 可以通过 ctx.req 和 ctx.res （node.js 对象，不会存在于浏览器运行环境里面的）来进行判断，但是在符合在服务端可以判断。在客户端进行判断，是没有 ctx 对象的。\n  // 发起请求，列出你所有的创建的仓库\n\n  const userRepos = await api.request({\n    url: \"/user/repos\"\n  }, ctx.req, ctx.res); // 被关注的仓库\n\n  const userStaredRepos = await api.request({\n    url: \"/user/repos\"\n  }, ctx.req, ctx.res);\n  return {\n    isLogin: true,\n    userRepos: userRepos.data,\n    userStaredRepos: userStaredRepos.data\n  };\n};\n\nexport default connect(function mapStateToProps(state) {\n  console.log(state);\n  user = state.user;\n  return {};\n})(Index);","map":{"version":3,"sources":["C:/Users/pc/Desktop/慕课学习/nextjs-create-app/pages/index.js"],"names":["axios","api","require","connect","user","Index","userRepos","userStaredRepos","isLogin","console","log","getInitialProps","appContext","request","url","ctx","req","res","data","mapStateToProps","state"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAAC,YAAD,CAAnB;;AAEA,SAASC,OAAT,QAAwB,aAAxB;AAEA,IAAIC,IAAJ;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,eAAb;AAA8BC,EAAAA;AAA9B,CAAD,KAA6C;AACzDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,eAAZ;AACA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CALD,C,CAMA;AAEA;AAEA;;;AACAF,KAAK,CAACM,eAAN,GAAwB,MAAOC,UAAP,IAAsB;AAC5C,MAAI,CAACR,IAAL,EAAW;AACT,WAAO;AACLI,MAAAA,OAAO,EAAE;AADJ,KAAP;AAGD;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAN4C,CAO5C;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;AACA,QAAMJ,SAAS,GAAG,MAAML,GAAG,CAACY,OAAJ,CAAY;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAAZ,EAAoCC,GAAG,CAACC,GAAxC,EAA6CD,GAAG,CAACE,GAAjD,CAAxB,CApB4C,CAqB5C;;AACA,QAAMV,eAAe,GAAG,MAAMN,GAAG,CAACY,OAAJ,CAC5B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAD4B,EAE5BC,GAAG,CAACC,GAFwB,EAG5BD,GAAG,CAACE,GAHwB,CAA9B;AAMA,SAAO;AACLT,IAAAA,OAAO,EAAE,IADJ;AAELF,IAAAA,SAAS,EAAEA,SAAS,CAACY,IAFhB;AAGLX,IAAAA,eAAe,EAAEA,eAAe,CAACW;AAH5B,GAAP;AAKD,CAjCD;;AAmCA,eAAef,OAAO,CAAC,SAASgB,eAAT,CAAyBC,KAAzB,EAAgC;AACrDX,EAAAA,OAAO,CAACC,GAAR,CAAYU,KAAZ;AACAhB,EAAAA,IAAI,GAAGgB,KAAK,CAAChB,IAAb;AACA,SAAO,EAAP;AACD,CAJqB,CAAP,CAIZC,KAJY,CAAf","sourcesContent":["import axios from \"axios\";\r\n\r\nconst api = require(\"../lib/api\");\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nlet user;\r\n\r\nconst Index = ({ userRepos, userStaredRepos, isLogin }) => {\r\n  console.log(isLogin);\r\n  console.log(userRepos);\r\n  console.log(userStaredRepos);\r\n  return <span>去登录</span>;\r\n};\r\n// 注意我们在组件中（getInitialProps）中，只会使用到 request ，因为 request 会帮助我们去判断是客户端还是服务端\r\n\r\n// 注意 getInitialProps 会在客户端不同页面跳转的时候使用，同样服务端如果我们访问的是 index 这个页面，也会调用 getInitialProps，在服务端渲染的时候调用的时候，我们的运行环境处于 node.js 环境，而不是浏览器的环境，如果我们在 node.js 的环境下请求就会出现请求的是 http://localhost:3000/ 这样的地址，所以会失败（默认的端口是80）\r\n\r\n// 注意这里是 ctx 而不是 {ctx}\r\nIndex.getInitialProps = async (appContext) => {\r\n  if (!user) {\r\n    return {\r\n      isLogin: false,\r\n    };\r\n  }\r\n  console.log(22222222222);\r\n  // 报 Error: connect ECONNREFUSED 127.0.0.1:80 的错误\r\n  // 如果是在浏览器里面发送的，会根据我们提供的路径会自动加上我们当前网站的域名（就是http://localhost:3000/）所以它完整请求路径就是 http://localhost:3000/github/search/repositories?q=react\r\n  // 如果是在服务端渲染的时候进行执行的话，所以没有浏览器里面的域名的，这个时候请求的路径自动在 axios 里面增加的 http://127.0.0.1（默认80端口）/github/search/repositories?q=react，这个时候就不对了，我们 80 端口没有启动，也不是我们想请求的地址\r\n  // const result = await axios\r\n  //   .get(\"/github/search/repositories?q=react\")\r\n  //   .then((resp) => console.log(resp));\r\n\r\n  // 注意 req 和 res 只有在服务端渲染的时候才会有\r\n\r\n  // 注意一旦登出了，我们需要做个请求的判断\r\n  // 可以通过 ctx.req 和 ctx.res （node.js 对象，不会存在于浏览器运行环境里面的）来进行判断，但是在符合在服务端可以判断。在客户端进行判断，是没有 ctx 对象的。\r\n\r\n  // 发起请求，列出你所有的创建的仓库\r\n  const userRepos = await api.request({ url: \"/user/repos\" }, ctx.req, ctx.res);\r\n  // 被关注的仓库\r\n  const userStaredRepos = await api.request(\r\n    { url: \"/user/repos\" },\r\n    ctx.req,\r\n    ctx.res\r\n  );\r\n\r\n  return {\r\n    isLogin: true,\r\n    userRepos: userRepos.data,\r\n    userStaredRepos: userStaredRepos.data,\r\n  };\r\n};\r\n\r\nexport default connect(function mapStateToProps(state) {\r\n  console.log(state);\r\n  user = state.user;\r\n  return {};\r\n})(Index);\r\n"]},"metadata":{},"sourceType":"module"}