{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/pc/Desktop/\\u6155\\u8BFE\\u5B66\\u4E60/nextjs-create-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/pc/Desktop/\\u6155\\u8BFE\\u5B66\\u4E60/nextjs-create-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\\\u6155\\u8BFE\\u5B66\\u4E60\\\\nextjs-create-app\\\\pages\\\\index.js\",\n    _this = this;\n\n// import axios from \"axios\";\nvar api = require(\"../lib/api\");\n\nvar Index = function Index() {\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"\\u53BB\\u767B\\u5F55\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, _this);\n}; // 注意我们在组件中（getInitialProps）中，只会使用到 request ，因为 request 会帮助我们去判断是客户端还是服务端\n// 注意 getInitialProps 会在客户端不同页面跳转的时候使用，同样服务端如果我们访问的是 index 这个页面，也会调用 getInitialProps，在服务端渲染的时候调用的时候，我们的运行环境处于 node.js 环境，而不是浏览器的环境，如果我们在 node.js 的环境下请求就会出现请求的是 http://localhost:3000/ 这样的地址，所以会失败（默认的端口是80）\n// 注意这里是 ctx 而不是 {ctx}\n\n\n_c = Index;\n\nIndex.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(111111111111111); // 报 Error: connect ECONNREFUSED 127.0.0.1:80 的错误\n            // 如果是在浏览器里面发送的，会根据我们提供的路径会自动加上我们当前网站的域名（就是http://localhost:3000/）所以它完整请求路径就是 http://localhost:3000/github/search/repositories?q=react\n            // 如果是在服务端渲染的时候进行执行的话，所以没有浏览器里面的域名的，这个时候请求的路径自动在 axios 里面增加的 http://127.0.0.1（默认80端口）/github/search/repositories?q=react，这个时候就不对了，我们 80 端口没有启动，也不是我们想请求的地址\n            // const result = await axios\n            //   .get(\"/github/search/repositories?q=react\")\n            //   .then((resp) => console.log(resp));\n            // 注意 req 和 res 只有在服务端渲染的时候才会有\n            // 发起请求，列出你所有的创建的仓库\n\n            _context.next = 3;\n            return api.request({\n              url: \"/users/repos\"\n            }, ctx.req, ctx.res);\n\n          case 3:\n            result = _context.sent;\n            return _context.abrupt(\"return\", {\n              data: result.data\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["C:/Users/pc/Desktop/慕课学习/nextjs-create-app/pages/index.js"],"names":["api","require","Index","getInitialProps","ctx","console","log","request","url","req","res","result","data"],"mappings":";;;;;;;AAAA;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,YAAD,CAAnB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClB,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,CAFD,C,CAGA;AAEA;AAEA;;;KAPMA,K;;AAQNA,KAAK,CAACC,eAAN;AAAA,sEAAwB,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBC,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EADsB,CAEtB;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAXsB;AAAA,mBAYDN,GAAG,CAACO,OAAJ,CAAY;AAAEC,cAAAA,GAAG,EAAE;AAAP,aAAZ,EAAqCJ,GAAG,CAACK,GAAzC,EAA8CL,GAAG,CAACM,GAAlD,CAZC;;AAAA;AAYhBC,YAAAA,MAZgB;AAAA,6CAcf;AACLC,cAAAA,IAAI,EAAED,MAAM,CAACC;AADR,aAde;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AAmBA,eAAeV,KAAf","sourcesContent":["// import axios from \"axios\";\r\n\r\nconst api = require(\"../lib/api\");\r\n\r\nconst Index = () => {\r\n  return <span>去登录</span>;\r\n};\r\n// 注意我们在组件中（getInitialProps）中，只会使用到 request ，因为 request 会帮助我们去判断是客户端还是服务端\r\n\r\n// 注意 getInitialProps 会在客户端不同页面跳转的时候使用，同样服务端如果我们访问的是 index 这个页面，也会调用 getInitialProps，在服务端渲染的时候调用的时候，我们的运行环境处于 node.js 环境，而不是浏览器的环境，如果我们在 node.js 的环境下请求就会出现请求的是 http://localhost:3000/ 这样的地址，所以会失败（默认的端口是80）\r\n\r\n// 注意这里是 ctx 而不是 {ctx}\r\nIndex.getInitialProps = async (ctx) => {\r\n  console.log(111111111111111);\r\n  // 报 Error: connect ECONNREFUSED 127.0.0.1:80 的错误\r\n  // 如果是在浏览器里面发送的，会根据我们提供的路径会自动加上我们当前网站的域名（就是http://localhost:3000/）所以它完整请求路径就是 http://localhost:3000/github/search/repositories?q=react\r\n  // 如果是在服务端渲染的时候进行执行的话，所以没有浏览器里面的域名的，这个时候请求的路径自动在 axios 里面增加的 http://127.0.0.1（默认80端口）/github/search/repositories?q=react，这个时候就不对了，我们 80 端口没有启动，也不是我们想请求的地址\r\n  // const result = await axios\r\n  //   .get(\"/github/search/repositories?q=react\")\r\n  //   .then((resp) => console.log(resp));\r\n\r\n  // 注意 req 和 res 只有在服务端渲染的时候才会有\r\n\r\n  // 发起请求，列出你所有的创建的仓库\r\n  const result = await api.request({ url: \"/users/repos\" }, ctx.req, ctx.res);\r\n\r\n  return {\r\n    data: result.data,\r\n  };\r\n};\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}