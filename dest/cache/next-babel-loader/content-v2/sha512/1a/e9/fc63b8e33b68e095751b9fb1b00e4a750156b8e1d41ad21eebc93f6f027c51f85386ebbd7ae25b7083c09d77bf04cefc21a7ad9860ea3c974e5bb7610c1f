{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/pc/Desktop/\\u6155\\u8BFE\\u5B66\\u4E60/nextjs-create-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/pc/Desktop/\\u6155\\u8BFE\\u5B66\\u4E60/nextjs-create-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\\\u6155\\u8BFE\\u5B66\\u4E60\\\\nextjs-create-app\\\\pages\\\\index.js\";\n\nvar api = require(\"../lib/api\");\n\nimport testHoc from \"../lib/with-redux\"; // const Index = ({ Component, pageProps, reduxStore }) => {\n//   // console.log(isLogin);\n//   // console.log(userRepos);\n//   // console.log(userStaredRepos);\n//   return <span>去登录</span>;\n// };\n\nfunction Index(_ref) {\n  var userRepos = _ref.userRepos,\n      userStaredRepos = _ref.userStaredRepos,\n      isLogin = _ref.isLogin,\n      reduxStore = _ref.reduxStore;\n  // console.log(isLogin);\n  // console.log(userRepos);\n  // console.log(userStaredRepos);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"\\u53BB\\u767B\\u5F55\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 10\n  }, this);\n} // 注意我们在组件中（getInitialProps）中，只会使用到 request ，因为 request 会帮助我们去判断是客户端还是服务端\n// 注意 getInitialProps 会在客户端不同页面跳转的时候使用，同样服务端如果我们访问的是 index 这个页面，也会调用 getInitialProps，在服务端渲染的时候调用的时候，我们的运行环境处于 node.js 环境，而不是浏览器的环境，如果我们在 node.js 的环境下请求就会出现请求的是 http://localhost:3000/ 这样的地址，所以会失败（默认的端口是80）\n// 注意这里是 ctx 而不是 {ctx}\n\n\n_c = Index;\n\nIndex.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var userRepos, userStaredRepos;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(ctx.reduxStore, 2222); // 报 Error: connect ECONNREFUSED 127.0.0.1:80 的错误\n            // 如果是在浏览器里面发送的，会根据我们提供的路径会自动加上我们当前网站的域名（就是http://localhost:3000/）所以它完整请求路径就是 http://localhost:3000/github/search/repositories?q=react\n            // 如果是在服务端渲染的时候进行执行的话，所以没有浏览器里面的域名的，这个时候请求的路径自动在 axios 里面增加的 http://127.0.0.1（默认80端口）/github/search/repositories?q=react，这个时候就不对了，我们 80 端口没有启动，也不是我们想请求的地址\n            // const result = await axios\n            //   .get(\"/github/search/repositories?q=react\")\n            //   .then((resp) => console.log(resp));\n            // 注意 req 和 res 只有在服务端渲染的时候才会有\n            // 注意一旦登出了，我们需要做个请求的判断\n            // 可以通过 ctx.req 和 ctx.res （node.js 对象，不会存在于浏览器运行环境里面的）来进行判断，但是在符合在服务端可以判断。在客户端进行判断，是没有 ctx 对象的。\n            // 发起请求，列出你所有的创建的仓库\n\n            _context.next = 3;\n            return api.request({\n              url: \"/user/repos\"\n            }, ctx.req, ctx.res);\n\n          case 3:\n            userRepos = _context.sent;\n            _context.next = 6;\n            return api.request({\n              url: \"/gists/starred\"\n            }, ctx.req, ctx.res);\n\n          case 6:\n            userStaredRepos = _context.sent;\n            return _context.abrupt(\"return\", {\n              isLogin: true,\n              userRepos: userRepos.data,\n              userStaredRepos: userStaredRepos.data\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default _c2 = testHoc(Index);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Index\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/pc/Desktop/慕课学习/nextjs-create-app/pages/index.js"],"names":["api","require","testHoc","Index","userRepos","userStaredRepos","isLogin","reduxStore","getInitialProps","ctx","console","log","request","url","req","res","data"],"mappings":";;;;;AAAA,IAAMA,GAAG,GAAGC,OAAO,CAAC,YAAD,CAAnB;;AAEA,OAAOC,OAAP,MAAoB,mBAApB,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,KAAT,OAAoE;AAAA,MAAnDC,SAAmD,QAAnDA,SAAmD;AAAA,MAAxCC,eAAwC,QAAxCA,eAAwC;AAAA,MAAvBC,OAAuB,QAAvBA,OAAuB;AAAA,MAAdC,UAAc,QAAdA,UAAc;AAClE;AACA;AACA;AACA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CACD;AAEA;AAEA;;;KAVSJ,K;;AAWTA,KAAK,CAACK,eAAN;AAAA,uEAAwB,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACF,UAAhB,EAA4B,IAA5B,EADsB,CAEtB;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;AAdsB;AAAA,mBAeEP,GAAG,CAACY,OAAJ,CAAY;AAAEC,cAAAA,GAAG,EAAE;AAAP,aAAZ,EAAoCJ,GAAG,CAACK,GAAxC,EAA6CL,GAAG,CAACM,GAAjD,CAfF;;AAAA;AAehBX,YAAAA,SAfgB;AAAA;AAAA,mBAiBQJ,GAAG,CAACY,OAAJ,CAC5B;AAAEC,cAAAA,GAAG,EAAE;AAAP,aAD4B,EAE5BJ,GAAG,CAACK,GAFwB,EAG5BL,GAAG,CAACM,GAHwB,CAjBR;;AAAA;AAiBhBV,YAAAA,eAjBgB;AAAA,6CAuBf;AACLC,cAAAA,OAAO,EAAE,IADJ;AAELF,cAAAA,SAAS,EAAEA,SAAS,CAACY,IAFhB;AAGLX,cAAAA,eAAe,EAAEA,eAAe,CAACW;AAH5B,aAvBe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AA8BA,qBAAed,OAAO,CAACC,KAAD,CAAtB","sourcesContent":["const api = require(\"../lib/api\");\r\n\r\nimport testHoc from \"../lib/with-redux\";\r\n\r\n// const Index = ({ Component, pageProps, reduxStore }) => {\r\n//   // console.log(isLogin);\r\n//   // console.log(userRepos);\r\n//   // console.log(userStaredRepos);\r\n//   return <span>去登录</span>;\r\n// };\r\n\r\nfunction Index({ userRepos, userStaredRepos, isLogin, reduxStore }) {\r\n  // console.log(isLogin);\r\n  // console.log(userRepos);\r\n  // console.log(userStaredRepos);\r\n  return <span>去登录</span>;\r\n}\r\n// 注意我们在组件中（getInitialProps）中，只会使用到 request ，因为 request 会帮助我们去判断是客户端还是服务端\r\n\r\n// 注意 getInitialProps 会在客户端不同页面跳转的时候使用，同样服务端如果我们访问的是 index 这个页面，也会调用 getInitialProps，在服务端渲染的时候调用的时候，我们的运行环境处于 node.js 环境，而不是浏览器的环境，如果我们在 node.js 的环境下请求就会出现请求的是 http://localhost:3000/ 这样的地址，所以会失败（默认的端口是80）\r\n\r\n// 注意这里是 ctx 而不是 {ctx}\r\nIndex.getInitialProps = async (ctx) => {\r\n  console.log(ctx.reduxStore, 2222);\r\n  // 报 Error: connect ECONNREFUSED 127.0.0.1:80 的错误\r\n  // 如果是在浏览器里面发送的，会根据我们提供的路径会自动加上我们当前网站的域名（就是http://localhost:3000/）所以它完整请求路径就是 http://localhost:3000/github/search/repositories?q=react\r\n  // 如果是在服务端渲染的时候进行执行的话，所以没有浏览器里面的域名的，这个时候请求的路径自动在 axios 里面增加的 http://127.0.0.1（默认80端口）/github/search/repositories?q=react，这个时候就不对了，我们 80 端口没有启动，也不是我们想请求的地址\r\n  // const result = await axios\r\n  //   .get(\"/github/search/repositories?q=react\")\r\n  //   .then((resp) => console.log(resp));\r\n\r\n  // 注意 req 和 res 只有在服务端渲染的时候才会有\r\n\r\n  // 注意一旦登出了，我们需要做个请求的判断\r\n  // 可以通过 ctx.req 和 ctx.res （node.js 对象，不会存在于浏览器运行环境里面的）来进行判断，但是在符合在服务端可以判断。在客户端进行判断，是没有 ctx 对象的。\r\n\r\n  // 发起请求，列出你所有的创建的仓库\r\n  const userRepos = await api.request({ url: \"/user/repos\" }, ctx.req, ctx.res);\r\n  // 被关注的仓库\r\n  const userStaredRepos = await api.request(\r\n    { url: \"/gists/starred\" },\r\n    ctx.req,\r\n    ctx.res\r\n  );\r\n\r\n  return {\r\n    isLogin: true,\r\n    userRepos: userRepos.data,\r\n    userStaredRepos: userStaredRepos.data,\r\n  };\r\n};\r\n\r\nexport default testHoc(Index);\r\n"]},"metadata":{},"sourceType":"module"}