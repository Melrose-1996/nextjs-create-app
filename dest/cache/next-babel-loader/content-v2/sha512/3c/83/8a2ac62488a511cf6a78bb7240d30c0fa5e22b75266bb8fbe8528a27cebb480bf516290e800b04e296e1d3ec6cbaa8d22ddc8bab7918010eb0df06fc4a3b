{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"../styles/globals.css\";\nimport \"antd/dist/antd.css\";\nimport App from \"next/app\";\nimport Layout from \"../components/layout\"; // import Router from \"next/router\";\n\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport PageLoading from \"../components/PageLoading\";\nimport { Provider } from \"react-redux\";\nimport MyContext from \"../lib/my-context\";\nimport testHoc from \"../lib/with-redux\";\n\nfunction MyApp({\n  Component,\n  pageProps,\n  reduxStore\n}) {\n  const router = useRouter();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  useEffect(() => {\n    const handleStart = () => setLoading(true);\n\n    const handleComplete = () => setLoading(false);\n\n    router.events.on(\"routeChangeStart\", handleStart);\n    router.events.on(\"routeChangeComplete\", handleComplete);\n    router.events.on(\"routeChangeError\", handleComplete); // 搜索仓库\n    // axios\n    //   .get(\"/github/search/repositories?q=react\")\n    //   .then((resp) => console.log(resp));\n\n    return () => {\n      router.events.off(\"routeChangeStart\", handleStart);\n      router.events.off(\"routeChangeComplete\", handleComplete);\n      router.events.off(\"routeChangeError\", handleComplete);\n    };\n  }); // return loading && <div>Loading....{/*I have an animation here*/}</div>;\n\n  return /*#__PURE__*/_jsx(Provider, {\n    store: reduxStore,\n    children: /*#__PURE__*/_jsx(Layout, {\n      children: /*#__PURE__*/_jsxs(MyContext.Provider, {\n        value: \"Melrose\",\n        children: [loading ? /*#__PURE__*/_jsx(PageLoading, {}) : null, /*#__PURE__*/_jsx(Component, _objectSpread({}, pageProps))]\n      })\n    })\n  });\n}\n\nMyApp.getInitialProps = async appContext => {\n  const appProps = await App.getInitialProps(appContext);\n  return _objectSpread({}, appProps);\n};\n\nexport default testHoc(MyApp);","map":null,"metadata":{},"sourceType":"module"}