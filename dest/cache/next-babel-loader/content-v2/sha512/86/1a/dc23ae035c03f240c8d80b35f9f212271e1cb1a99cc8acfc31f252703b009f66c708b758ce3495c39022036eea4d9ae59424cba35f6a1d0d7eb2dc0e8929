{"ast":null,"code":"// 专门处理 getInitalProps 请求接口功能的相关函数\n// 由于在客户端执行又要在服务端执行，所以不直接使用 exports 这语法，在 ndoe.js 目前不支持\nconst axios = require(\"axios\");\n\nconst github_base_url = \"https://api.github.com\"; // 这个方法就是单纯的向服务端发起请求的方法\n\nasync function requestGithub(method, url, data, headers) {\n  return await axios({\n    url: `${github_base_url}${url}`,\n    method,\n    data,\n    headers\n  });\n} // 服务端\n\n\nconst isServer = true;\n\nasync function request({\n  method = \"GET\",\n  url,\n  data = {}\n}, req, res) {\n  if (!url) {\n    throw Error(\"url must provide\");\n  }\n\n  if (isServer) {\n    // 服务端\n    const session = req.session;\n    console.log(session);\n    const githubAuth = session.githubAuth || {}; // 请求 github 数据\n\n    const headers = {};\n\n    if (githubAuth.access_token) {\n      headers[\"Authorization\"] = `${githubAuth.token_type} ${githubAuth.access_token}`;\n    }\n\n    return await requestGithub(method, url, data, headers);\n  } else {\n    console.log(\"------------------------------------\"); // 客户端 - 我们是需要请求自己的服务的，我们自己的服务对于 URL 也会进行处理\n    // /search/repositories?q=react => /github/search/repositories?q=react\n    // 这样我们服务端通过判断 /github 开头的这个请求的地址进行一个特殊的处理\n\n    return await axios({\n      url: `/github${url}`,\n      method,\n      data\n    });\n  }\n}\n\nmodule.exports = {\n  request,\n  requestGithub\n};","map":{"version":3,"sources":["C:/Users/pc/Desktop/慕课学习/nextjs-create-app/lib/api.js"],"names":["axios","require","github_base_url","requestGithub","method","url","data","headers","isServer","request","req","res","Error","session","console","log","githubAuth","access_token","token_type","module","exports"],"mappings":"AAAA;AACA;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMC,eAAe,GAAG,wBAAxB,C,CAEA;;AACA,eAAeC,aAAf,CAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,EAAgDC,OAAhD,EAAyD;AACvD,SAAO,MAAMP,KAAK,CAAC;AACjBK,IAAAA,GAAG,EAAG,GAAEH,eAAgB,GAAEG,GAAI,EADb;AAEjBD,IAAAA,MAFiB;AAGjBE,IAAAA,IAHiB;AAIjBC,IAAAA;AAJiB,GAAD,CAAlB;AAMD,C,CAED;;;AACA,MAAMC,QAAQ,OAAd;;AACA,eAAeC,OAAf,CAAuB;AAAEL,EAAAA,MAAM,GAAG,KAAX;AAAkBC,EAAAA,GAAlB;AAAuBC,EAAAA,IAAI,GAAG;AAA9B,CAAvB,EAA2DI,GAA3D,EAAgEC,GAAhE,EAAqE;AACnE,MAAI,CAACN,GAAL,EAAU;AACR,UAAMO,KAAK,CAAC,kBAAD,CAAX;AACD;;AACD,MAAIJ,QAAJ,EAAc;AACZ;AACA,UAAMK,OAAO,GAAGH,GAAG,CAACG,OAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,UAAMG,UAAU,GAAGH,OAAO,CAACG,UAAR,IAAsB,EAAzC,CAJY,CAKZ;;AACA,UAAMT,OAAO,GAAG,EAAhB;;AACA,QAAIS,UAAU,CAACC,YAAf,EAA6B;AAC3BV,MAAAA,OAAO,CACL,eADK,CAAP,GAEK,GAAES,UAAU,CAACE,UAAW,IAAGF,UAAU,CAACC,YAAa,EAFxD;AAGD;;AACD,WAAO,MAAMd,aAAa,CAACC,MAAD,EAASC,GAAT,EAAcC,IAAd,EAAoBC,OAApB,CAA1B;AACD,GAbD,MAaO;AACLO,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EADK,CAEL;AACA;AACA;;AACA,WAAO,MAAMf,KAAK,CAAC;AACjBK,MAAAA,GAAG,EAAG,UAASA,GAAI,EADF;AAEjBD,MAAAA,MAFiB;AAGjBE,MAAAA;AAHiB,KAAD,CAAlB;AAKD;AACF;;AAEDa,MAAM,CAACC,OAAP,GAAiB;AACfX,EAAAA,OADe;AAEfN,EAAAA;AAFe,CAAjB","sourcesContent":["// 专门处理 getInitalProps 请求接口功能的相关函数\r\n// 由于在客户端执行又要在服务端执行，所以不直接使用 exports 这语法，在 ndoe.js 目前不支持\r\n\r\nconst axios = require(\"axios\");\r\n\r\nconst github_base_url = \"https://api.github.com\";\r\n\r\n// 这个方法就是单纯的向服务端发起请求的方法\r\nasync function requestGithub(method, url, data, headers) {\r\n  return await axios({\r\n    url: `${github_base_url}${url}`,\r\n    method,\r\n    data,\r\n    headers,\r\n  });\r\n}\r\n\r\n// 服务端\r\nconst isServer = typeof window === \"undefined\";\r\nasync function request({ method = \"GET\", url, data = {} }, req, res) {\r\n  if (!url) {\r\n    throw Error(\"url must provide\");\r\n  }\r\n  if (isServer) {\r\n    // 服务端\r\n    const session = req.session;\r\n    console.log(session);\r\n    const githubAuth = session.githubAuth || {};\r\n    // 请求 github 数据\r\n    const headers = {};\r\n    if (githubAuth.access_token) {\r\n      headers[\r\n        \"Authorization\"\r\n      ] = `${githubAuth.token_type} ${githubAuth.access_token}`;\r\n    }\r\n    return await requestGithub(method, url, data, headers);\r\n  } else {\r\n    console.log(\"------------------------------------\");\r\n    // 客户端 - 我们是需要请求自己的服务的，我们自己的服务对于 URL 也会进行处理\r\n    // /search/repositories?q=react => /github/search/repositories?q=react\r\n    // 这样我们服务端通过判断 /github 开头的这个请求的地址进行一个特殊的处理\r\n    return await axios({\r\n      url: `/github${url}`,\r\n      method,\r\n      data,\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  request,\r\n  requestGithub,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}