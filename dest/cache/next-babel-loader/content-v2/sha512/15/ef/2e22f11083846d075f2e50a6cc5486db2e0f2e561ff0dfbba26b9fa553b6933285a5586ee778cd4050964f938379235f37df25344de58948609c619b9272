{"ast":null,"code":"import _Spin from \"antd/lib/spin\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _Select from \"antd/lib/select\";\nvar _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\\\u6155\\u8BFE\\u5B66\\u4E60\\\\nextjs-create-app\\\\components\\\\SearchUser.jsx\";\nimport { useState } from 'react';\nimport api from '../lib/api';\nconst Option = _Select.Option;\n\nfunction SearchUser() {\n  const {\n    0: fetching,\n    1: setFetching\n  } = useState(false);\n  const {\n    0: options,\n    1: setOptions\n  } = useState([]);\n\n  const fetchUser = value => {\n    setFetching(true);\n    setOptions([]); // 不需要传入 req 和 res ，因为这是一个要用户点输入才会执行的操作，肯定是在浏览器环境执行的内容\n\n    api.request({\n      url: `/search/users?q=${value}`\n    }).then(reps => {\n      const data = reps.data.items.map(user => ({\n        text: user.login,\n        value: user.login\n      }));\n      setFetching(false);\n      setOptions(data);\n    });\n  }; // showSearch -> 表示的是 select 具有搜索功能\n  // filterOption -> 用于 Select 组件现成已经有 Option 来出现了，这个时候我们输入框中输入文字，是输入我们现有的已经在 Option 里面的展示的这些内容。 因为我们要展示服务端的内容，所以设置为 false。\n\n\n  return /*#__PURE__*/_jsxDEV(_Select, {\n    showSearch: true,\n    notFoundContent: fetching ? /*#__PURE__*/_jsxDEV(_Spin, {\n      size: \"small\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 66\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Nothing Found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 90\n    }, this),\n    filterOption: false,\n    placeholder: \"\\u521B\\u5EFA\\u8005\",\n    allowClear: true,\n    onSearch: fetchUser,\n    children: options.map(ops => /*#__PURE__*/_jsxDEV(Option, {\n      value: ops.value,\n      children: ops.text\n    }, ops.value, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 32\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 12\n  }, this);\n}\n\nexport default SearchUser;","map":{"version":3,"sources":["C:/Users/pc/Desktop/慕课学习/nextjs-create-app/components/SearchUser.jsx"],"names":["useState","api","Option","SearchUser","fetching","setFetching","options","setOptions","fetchUser","value","request","url","then","reps","data","items","map","user","text","login","ops"],"mappings":";;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAIA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,MAAMC,MAAM,GAAG,QAAOA,MAAtB;;AAEA,SAASC,UAAT,GAAsB;AAElB,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BL,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAM;AAAA,OAACM,OAAD;AAAA,OAAUC;AAAV,MAAwBP,QAAQ,CAAC,EAAD,CAAtC;;AAEA,QAAMQ,SAAS,GAAGC,KAAK,IAAI;AAEvBJ,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,IAAAA,UAAU,CAAC,EAAD,CAAV,CAHuB,CAIvB;;AACAN,IAAAA,GAAG,CAACS,OAAJ,CAAY;AACRC,MAAAA,GAAG,EAAG,mBAAkBF,KAAM;AADtB,KAAZ,EAEGG,IAFH,CAEQC,IAAI,IAAI;AACZ,YAAMC,IAAI,GAAGD,IAAI,CAACC,IAAL,CAAUC,KAAV,CAAgBC,GAAhB,CAAoBC,IAAI,KAAK;AACtCC,QAAAA,IAAI,EAAED,IAAI,CAACE,KAD2B;AAEtCV,QAAAA,KAAK,EAAEQ,IAAI,CAACE;AAF0B,OAAL,CAAxB,CAAb;AAIAd,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,MAAAA,UAAU,CAACO,IAAD,CAAV;AACH,KATD;AAYH,GAjBD,CANkB,CAwBlB;AACA;;;AACA,sBAAO;AAAQ,IAAA,UAAU,EAAE,IAApB;AAA0B,IAAA,eAAe,EAAEV,QAAQ,gBAAG;AAAM,MAAA,IAAI,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,YAAH,gBAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA9E;AAA0G,IAAA,YAAY,EAAE,KAAxH;AAA+H,IAAA,WAAW,EAAC,oBAA3I;AAAiJ,IAAA,UAAU,EAAE,IAA7J;AAAmK,IAAA,QAAQ,EAAEI,SAA7K;AAAA,cAECF,OAAO,CAACU,GAAR,CAAYI,GAAG,iBAAI,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAEA,GAAG,CAACX,KAAnB;AAAA,gBAA2CW,GAAG,CAACF;AAA/C,OAA+BE,GAAG,CAACX,KAAnC;AAAA;AAAA;AAAA;AAAA,YAAnB;AAFD;AAAA;AAAA;AAAA;AAAA,UAAP;AAMH;;AAED,eAAeN,UAAf","sourcesContent":["import { useState } from 'react'\r\n\r\nimport { Select, Spin } from 'antd'\r\n\r\nimport api from '../lib/api'\r\n\r\nconst Option = Select.Option\r\n\r\nfunction SearchUser() {\r\n\r\n    const [fetching, setFetching] = useState(false)\r\n\r\n    const [options, setOptions] = useState([])\r\n\r\n    const fetchUser = value => {\r\n\r\n        setFetching(true)\r\n        setOptions([])\r\n        // 不需要传入 req 和 res ，因为这是一个要用户点输入才会执行的操作，肯定是在浏览器环境执行的内容\r\n        api.request({\r\n            url: `/search/users?q=${value}`\r\n        }).then(reps => {\r\n            const data = reps.data.items.map(user => ({\r\n                text: user.login,\r\n                value: user.login\r\n            }))\r\n            setFetching(false)\r\n            setOptions(data)\r\n        })\r\n\r\n\r\n    }\r\n    // showSearch -> 表示的是 select 具有搜索功能\r\n    // filterOption -> 用于 Select 组件现成已经有 Option 来出现了，这个时候我们输入框中输入文字，是输入我们现有的已经在 Option 里面的展示的这些内容。 因为我们要展示服务端的内容，所以设置为 false。\r\n    return <Select showSearch={true} notFoundContent={fetching ? <Spin size='small' /> : <span>Nothing Found</span>} filterOption={false} placeholder='创建者' allowClear={true} onSearch={fetchUser}>\r\n        {\r\n            options.map(ops => <Option value={ops.value} key={ops.value}>{ops.text}</Option>)\r\n        }\r\n    </Select>\r\n\r\n}\r\n\r\nexport default SearchUser"]},"metadata":{},"sourceType":"module"}