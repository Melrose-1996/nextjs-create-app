{"ast":null,"code":"import _defineProperty from \"C:/Users/pc/Desktop/\\u6155\\u8BFE\\u5B66\\u4E60/nextjs-create-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createStore, combineReducers, applyMiddleware } from \"redux\"; // applyMiddleware 是 redux 的中间件，构建一些第三方的一些扩展 redux 整个应用体系的方法。\n\nimport ReduxThunk from \"redux-thunk\";\nimport axios from \"axios\";\nvar userInitialState = {};\nvar LOGOUT = \"LOGOUT\";\nvar UPDATE_USERNAME = \"UPDATE_USERNAME\";\n\nfunction userReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : userInitialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPDATE_USERNAME:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        username: action.name\n      });\n\n    case LOGOUT:\n      {\n        // 这里state拿到的就是 user:{}\n        // 注意我们要保持现在的状态更原先一致\n        return {};\n      }\n\n    default:\n      return state;\n  }\n}\n/* \r\n{ \r\n  user: {},\r\n  count: {}\r\n}\r\n*/\n\n\nvar allReducers = combineReducers({\n  user: userReducer // 如果还有一个 count\n\n}); // action creators\n\nexport function logout() {\n  return function (dispatch) {\n    axios.post(\"/logout\").then(function (resp) {\n      if (resp.status === 200) {\n        dispatch({\n          type: LOGOUT\n        });\n      } else {\n        console.log(\"logout failed\", resp);\n      }\n    })[\"catch\"](function (err) {\n      console.log(\"logout failed\", err);\n    });\n  };\n} // console.log(store.getState());\n\nexport default function initialzeStore(state) {\n  var store = createStore(allReducers, Object.assign({}, {\n    user: userInitialState\n  }, state), applyMiddleware(ReduxThunk));\n  return store;\n}","map":null,"metadata":{},"sourceType":"module"}