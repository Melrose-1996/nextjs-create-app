{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from \"redux\"; // applyMiddleware 是 redux 的中间件，构建一些第三方的一些扩展 redux 整个应用体系的方法。\n\nimport ReduxThunk from \"redux-thunk\";\nconst allReducers = combineReducers({\n  user: userReducer\n}); // 注意这里的 state 也会发生变化，会自动帮我进行模块区分 { count:initalState, user:userInitialState }\n\nconst store = createStore(allReducers, {\n  count: initalState,\n  user: userInitialState\n}, applyMiddleware(ReduxThunk)); // console.log(store.getState());\n// action creatore - 有些 action 我们传输的内容会比较多，每次去申明对象，显示这个 type 会比较麻烦，写一个 function 来传递一些参数进去会比较方便一些.\n// 注意我们用了 creatore 这个方法了之后，还是可以使用 { type: ADD } 这个方法来触发 action 的。 必须要保证 action 是一个对象\n\nfunction add(num) {\n  return {\n    type: ADD,\n    num\n  };\n}\n\nfunction addAsync(num) {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(add(num));\n    }, 1000);\n  };\n}\n\nstore.dispatch(add(3));\nstore.dispatch({\n  type: UPDATE_USERNAME,\n  name: \"Melrose\"\n}); // 这个方法的调用实在第一次 dispatch 之前，所以只会监测到第二次 dispatch 发生的变化，这个 api 是让我们监听 store 变化的 api\n\nstore.subscribe(() => {\n  console.log(\"+++++++++++++++++\", store.getState());\n});\nstore.dispatch(addAsync(5)); // console.log(store.getState());\n// 通过这样的方式，让服务端渲染的过程当中，通过调用这个方法来重新生成这个 store，使得每次这个 store 对象都是新的\n\nexport default function initialzeStore(state) {\n  const store = createStore(allReducers, Object.assign({}, {\n    count: initalState,\n    user: userInitialState\n  }, state), applyMiddleware(ReduxThunk));\n  return store;\n}","map":{"version":3,"sources":["C:/Users/pc/Desktop/慕课学习/nextjs-create-app/store/store.js"],"names":["createStore","combineReducers","applyMiddleware","ReduxThunk","allReducers","user","userReducer","store","count","initalState","userInitialState","add","num","type","ADD","addAsync","dispatch","setTimeout","UPDATE_USERNAME","name","subscribe","console","log","getState","initialzeStore","state","Object","assign"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D,C,CACA;;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAEA,MAAMC,WAAW,GAAGH,eAAe,CAAC;AAClCI,EAAAA,IAAI,EAAEC;AAD4B,CAAD,CAAnC,C,CAGA;;AACA,MAAMC,KAAK,GAAGP,WAAW,CACvBI,WADuB,EAEvB;AACEI,EAAAA,KAAK,EAAEC,WADT;AAEEJ,EAAAA,IAAI,EAAEK;AAFR,CAFuB,EAMvBR,eAAe,CAACC,UAAD,CANQ,CAAzB,C,CASA;AAEA;AACA;;AACA,SAASQ,GAAT,CAAaC,GAAb,EAAkB;AAChB,SAAO;AACLC,IAAAA,IAAI,EAAEC,GADD;AAELF,IAAAA;AAFK,GAAP;AAID;;AAED,SAASG,QAAT,CAAkBH,GAAlB,EAAuB;AACrB,SAAQI,QAAD,IAAc;AACnBC,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,QAAQ,CAACL,GAAG,CAACC,GAAD,CAAJ,CAAR;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAJD;AAKD;;AAEDL,KAAK,CAACS,QAAN,CAAeL,GAAG,CAAC,CAAD,CAAlB;AACAJ,KAAK,CAACS,QAAN,CAAe;AAAEH,EAAAA,IAAI,EAAEK,eAAR;AAAyBC,EAAAA,IAAI,EAAE;AAA/B,CAAf,E,CAEA;;AAEAZ,KAAK,CAACa,SAAN,CAAgB,MAAM;AACpBC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCf,KAAK,CAACgB,QAAN,EAAjC;AACD,CAFD;AAIAhB,KAAK,CAACS,QAAN,CAAeD,QAAQ,CAAC,CAAD,CAAvB,E,CAEA;AAEA;;AACA,eAAe,SAASS,cAAT,CAAwBC,KAAxB,EAA+B;AAC5C,QAAMlB,KAAK,GAAGP,WAAW,CACvBI,WADuB,EAEvBsB,MAAM,CAACC,MAAP,CACE,EADF,EAEE;AACEnB,IAAAA,KAAK,EAAEC,WADT;AAEEJ,IAAAA,IAAI,EAAEK;AAFR,GAFF,EAMEe,KANF,CAFuB,EAUvBvB,eAAe,CAACC,UAAD,CAVQ,CAAzB;AAYA,SAAOI,KAAP;AACD","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\n// applyMiddleware 是 redux 的中间件，构建一些第三方的一些扩展 redux 整个应用体系的方法。\r\nimport ReduxThunk from \"redux-thunk\";\r\n\r\nconst allReducers = combineReducers({\r\n  user: userReducer,\r\n});\r\n// 注意这里的 state 也会发生变化，会自动帮我进行模块区分 { count:initalState, user:userInitialState }\r\nconst store = createStore(\r\n  allReducers,\r\n  {\r\n    count: initalState,\r\n    user: userInitialState,\r\n  },\r\n  applyMiddleware(ReduxThunk)\r\n);\r\n\r\n// console.log(store.getState());\r\n\r\n// action creatore - 有些 action 我们传输的内容会比较多，每次去申明对象，显示这个 type 会比较麻烦，写一个 function 来传递一些参数进去会比较方便一些.\r\n// 注意我们用了 creatore 这个方法了之后，还是可以使用 { type: ADD } 这个方法来触发 action 的。 必须要保证 action 是一个对象\r\nfunction add(num) {\r\n  return {\r\n    type: ADD,\r\n    num,\r\n  };\r\n}\r\n\r\nfunction addAsync(num) {\r\n  return (dispatch) => {\r\n    setTimeout(() => {\r\n      dispatch(add(num));\r\n    }, 1000);\r\n  };\r\n}\r\n\r\nstore.dispatch(add(3));\r\nstore.dispatch({ type: UPDATE_USERNAME, name: \"Melrose\" });\r\n\r\n// 这个方法的调用实在第一次 dispatch 之前，所以只会监测到第二次 dispatch 发生的变化，这个 api 是让我们监听 store 变化的 api\r\n\r\nstore.subscribe(() => {\r\n  console.log(\"+++++++++++++++++\", store.getState());\r\n});\r\n\r\nstore.dispatch(addAsync(5));\r\n\r\n// console.log(store.getState());\r\n\r\n// 通过这样的方式，让服务端渲染的过程当中，通过调用这个方法来重新生成这个 store，使得每次这个 store 对象都是新的\r\nexport default function initialzeStore(state) {\r\n  const store = createStore(\r\n    allReducers,\r\n    Object.assign(\r\n      {},\r\n      {\r\n        count: initalState,\r\n        user: userInitialState,\r\n      },\r\n      state\r\n    ),\r\n    applyMiddleware(ReduxThunk)\r\n  );\r\n  return store;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}