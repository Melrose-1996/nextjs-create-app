{"ast":null,"code":"// // 专门处理 getInitalProps 请求接口功能的相关函数\n// // 由于在客户端执行又要在服务端执行，所以不直接使用 exports 这语法，在 ndoe.js 目前不支持\n// const axios = require(\"axios\");\n// const github_base_url = \"https://api.github.com\";\n// // 这个方法就是单纯的向服务端发起请求的方法\n// async function requestGithub(method, url, data, headers) {\n//   return await axios({\n//     url: `${github_base_url}${url}`,\n//     method,\n//     data,\n//     headers,\n//   });\n// }\n// // 服务端\n// const isServer = typeof window === \"undefined\";\n// async function request({ method = \"GET\", url, data = {} }, req, res) {\n//   if (!url) {\n//     throw Error(\"url must provide\");\n//   }\n//   if (isServer) {\n//     // 服务端\n//     console.log(req, 111);\n//     const { session } = req;\n//     const githubAuth = session.githubAuth || {};\n//     // 请求 github 数据\n//     const headers = {};\n//     if (githubAuth.access_token) {\n//       headers[\n//         \"Authorization\"\n//       ] = `${githubAuth.token_type} ${githubAuth.access_token}`;\n//     }\n//     return await requestGithub(method, url, data, headers);\n//   } else {\n//     // 客户端 - 我们是需要请求自己的服务的，我们自己的服务对于 URL 也会进行处理\n//     // /search/repositories?q=react => /github/search/repositories?q=react\n//     // 这样我们服务端通过判断 /github 开头的这个请求的地址进行一个特殊的处理\n//     return await axios({\n//       url: `/github${url}`,\n//       method,\n//       data,\n//     });\n//   }\n// }\n// module.exports = {\n//   request,\n//   requestGithub,\n// };\nconst axios = require(\"axios\");\n\nconst GITHUB_BASE_URL = \"https://api.github.com\";\nconst isServer = true; // 服务端环境需要手动拼接url\n\nasync function requestGithub(method, url, data, headers) {\n  if (!url) {\n    throw new Error(\"url must be provided\");\n  }\n\n  const result = await axios({\n    method,\n    url: `${GITHUB_BASE_URL}${url}`,\n    data,\n    headers\n  });\n  return result;\n}\n\nasync function request({\n  method = \"GET\",\n  url,\n  data = {}\n}, req, res) {\n  if (isServer) {\n    const {\n      session\n    } = req;\n    const {\n      githubAuth\n    } = session || {};\n    const {\n      access_token,\n      token_type\n    } = githubAuth || {};\n    const headers = {};\n\n    if (access_token) {\n      headers.Authorization = `${token_type} ${access_token}`;\n    } // 服务端走requestGithub方法，\n    // 补全api的前缀\n\n\n    const serverResult = await requestGithub(method, url, data, headers);\n    return serverResult;\n  } // 客户端需要拼接github前缀 让koa的server可以识别并代理\n\n\n  const clientResult = await axios({\n    method,\n    url: `/github${url}`,\n    data\n  });\n  return clientResult;\n}\n\nmodule.exports = {\n  request,\n  requestGithub\n};","map":{"version":3,"sources":["D:/lls/chenzhengquan/Desktop/muke-study/nextjs-create-app/lib/api.js"],"names":["axios","require","GITHUB_BASE_URL","isServer","requestGithub","method","url","data","headers","Error","result","request","req","res","session","githubAuth","access_token","token_type","Authorization","serverResult","clientResult","module","exports"],"mappings":"AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMC,eAAe,GAAG,wBAAxB;AAEA,MAAMC,QAAQ,OAAd,C,CAEA;;AACA,eAAeC,aAAf,CAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,EAAgDC,OAAhD,EAAyD;AACvD,MAAI,CAACF,GAAL,EAAU;AACR,UAAM,IAAIG,KAAJ,CAAU,sBAAV,CAAN;AACD;;AACD,QAAMC,MAAM,GAAG,MAAMV,KAAK,CAAC;AACzBK,IAAAA,MADyB;AAEzBC,IAAAA,GAAG,EAAG,GAAEJ,eAAgB,GAAEI,GAAI,EAFL;AAGzBC,IAAAA,IAHyB;AAIzBC,IAAAA;AAJyB,GAAD,CAA1B;AAOA,SAAOE,MAAP;AACD;;AAED,eAAeC,OAAf,CAAuB;AAAEN,EAAAA,MAAM,GAAG,KAAX;AAAkBC,EAAAA,GAAlB;AAAuBC,EAAAA,IAAI,GAAG;AAA9B,CAAvB,EAA2DK,GAA3D,EAAgEC,GAAhE,EAAqE;AACnE,MAAIV,QAAJ,EAAc;AACZ,UAAM;AAAEW,MAAAA;AAAF,QAAcF,GAApB;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAiBD,OAAO,IAAI,EAAlC;AACA,UAAM;AAAEE,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,QAA+BF,UAAU,IAAI,EAAnD;AACA,UAAMP,OAAO,GAAG,EAAhB;;AACA,QAAIQ,YAAJ,EAAkB;AAChBR,MAAAA,OAAO,CAACU,aAAR,GAAyB,GAAED,UAAW,IAAGD,YAAa,EAAtD;AACD,KAPW,CAQZ;AACA;;;AACA,UAAMG,YAAY,GAAG,MAAMf,aAAa,CAACC,MAAD,EAASC,GAAT,EAAcC,IAAd,EAAoBC,OAApB,CAAxC;AACA,WAAOW,YAAP;AACD,GAbkE,CAenE;;;AACA,QAAMC,YAAY,GAAG,MAAMpB,KAAK,CAAC;AAC/BK,IAAAA,MAD+B;AAE/BC,IAAAA,GAAG,EAAG,UAASA,GAAI,EAFY;AAG/BC,IAAAA;AAH+B,GAAD,CAAhC;AAKA,SAAOa,YAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACfX,EAAAA,OADe;AAEfP,EAAAA;AAFe,CAAjB","sourcesContent":["// // 专门处理 getInitalProps 请求接口功能的相关函数\r\n// // 由于在客户端执行又要在服务端执行，所以不直接使用 exports 这语法，在 ndoe.js 目前不支持\r\n\r\n// const axios = require(\"axios\");\r\n\r\n// const github_base_url = \"https://api.github.com\";\r\n\r\n// // 这个方法就是单纯的向服务端发起请求的方法\r\n// async function requestGithub(method, url, data, headers) {\r\n//   return await axios({\r\n//     url: `${github_base_url}${url}`,\r\n//     method,\r\n//     data,\r\n//     headers,\r\n//   });\r\n// }\r\n\r\n// // 服务端\r\n// const isServer = typeof window === \"undefined\";\r\n// async function request({ method = \"GET\", url, data = {} }, req, res) {\r\n//   if (!url) {\r\n//     throw Error(\"url must provide\");\r\n//   }\r\n\r\n//   if (isServer) {\r\n//     // 服务端\r\n//     console.log(req, 111);\r\n//     const { session } = req;\r\n//     const githubAuth = session.githubAuth || {};\r\n//     // 请求 github 数据\r\n//     const headers = {};\r\n//     if (githubAuth.access_token) {\r\n//       headers[\r\n//         \"Authorization\"\r\n//       ] = `${githubAuth.token_type} ${githubAuth.access_token}`;\r\n//     }\r\n//     return await requestGithub(method, url, data, headers);\r\n//   } else {\r\n//     // 客户端 - 我们是需要请求自己的服务的，我们自己的服务对于 URL 也会进行处理\r\n//     // /search/repositories?q=react => /github/search/repositories?q=react\r\n//     // 这样我们服务端通过判断 /github 开头的这个请求的地址进行一个特殊的处理\r\n//     return await axios({\r\n//       url: `/github${url}`,\r\n//       method,\r\n//       data,\r\n//     });\r\n//   }\r\n// }\r\n\r\n// module.exports = {\r\n//   request,\r\n//   requestGithub,\r\n// };\r\n\r\nconst axios = require(\"axios\");\r\n\r\nconst GITHUB_BASE_URL = \"https://api.github.com\";\r\n\r\nconst isServer = typeof window === \"undefined\";\r\n\r\n// 服务端环境需要手动拼接url\r\nasync function requestGithub(method, url, data, headers) {\r\n  if (!url) {\r\n    throw new Error(\"url must be provided\");\r\n  }\r\n  const result = await axios({\r\n    method,\r\n    url: `${GITHUB_BASE_URL}${url}`,\r\n    data,\r\n    headers,\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nasync function request({ method = \"GET\", url, data = {} }, req, res) {\r\n  if (isServer) {\r\n    const { session } = req;\r\n    const { githubAuth } = session || {};\r\n    const { access_token, token_type } = githubAuth || {};\r\n    const headers = {};\r\n    if (access_token) {\r\n      headers.Authorization = `${token_type} ${access_token}`;\r\n    }\r\n    // 服务端走requestGithub方法，\r\n    // 补全api的前缀\r\n    const serverResult = await requestGithub(method, url, data, headers);\r\n    return serverResult;\r\n  }\r\n\r\n  // 客户端需要拼接github前缀 让koa的server可以识别并代理\r\n  const clientResult = await axios({\r\n    method,\r\n    url: `/github${url}`,\r\n    data,\r\n  });\r\n  return clientResult;\r\n}\r\n\r\nmodule.exports = {\r\n  request,\r\n  requestGithub,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}