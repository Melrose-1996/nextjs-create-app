{"ast":null,"code":"import _Button from \"antd/lib/button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\\\u6155\\u8BFE\\u5B66\\u4E60\\\\nextjs-create-app\\\\pages\\\\index.js\";\nimport _JSXStyle from \"styled-jsx/style\";\n\nconst api = require(\"../lib/api\");\n\nimport getConfig from \"next/config\";\nconst {\n  publicRuntimeConfig\n} = getConfig(); // const Index = ({ Component, pageProps, reduxStore }) => {\n//   // console.log(isLogin);\n//   // console.log(userRepos);\n//   // console.log(userStaredRepos);\n//   return <span>去登录</span>;\n// };\n\nfunction Index({\n  userRepos,\n  userStaredRepos,\n  isLogin\n}) {\n  console.log(isLogin);\n  console.log(userRepos);\n  console.log(userStaredRepos);\n\n  if (!isLogin) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"jsx-3452352219\" + \" \" + \"root\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"jsx-3452352219\",\n        children: \"\\u4EB2\\uFF0C\\u60A8\\u8FD8\\u6CA1\\u6709\\u767B\\u5F55\\u54E6~\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Button, {\n        type: \"primary\",\n        href: publicRuntimeConfig.OAUTH_URL,\n        children: \"\\u70B9\\u51FB\\u767B\\u5F55\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_JSXStyle, {\n        id: \"3452352219\",\n        children: \".root.jsx-3452352219{height:400px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-item:center;-webkit-box-align-item:center;-ms-flex-align-item:center;align-item:center;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xccGNcXERlc2t0b3BcXOaFleivvuWtpuS5oFxcbmV4dGpzLWNyZWF0ZS1hcHBcXHBhZ2VzXFxpbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEwQlcsQUFHNEIsYUFDQSwwRUFDUyw4RUFDQyxtR0FDTCxxR0FDcEIiLCJmaWxlIjoiQzpcXFVzZXJzXFxwY1xcRGVza3RvcFxc5oWV6K++5a2m5LmgXFxuZXh0anMtY3JlYXRlLWFwcFxccGFnZXNcXGluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXBpID0gcmVxdWlyZShcIi4uL2xpYi9hcGlcIik7XHJcblxyXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiYW50ZFwiO1xyXG5cclxuaW1wb3J0IGdldENvbmZpZyBmcm9tIFwibmV4dC9jb25maWdcIjtcclxuY29uc3QgeyBwdWJsaWNSdW50aW1lQ29uZmlnIH0gPSBnZXRDb25maWcoKTtcclxuXHJcbi8vIGNvbnN0IEluZGV4ID0gKHsgQ29tcG9uZW50LCBwYWdlUHJvcHMsIHJlZHV4U3RvcmUgfSkgPT4ge1xyXG4vLyAgIC8vIGNvbnNvbGUubG9nKGlzTG9naW4pO1xyXG4vLyAgIC8vIGNvbnNvbGUubG9nKHVzZXJSZXBvcyk7XHJcbi8vICAgLy8gY29uc29sZS5sb2codXNlclN0YXJlZFJlcG9zKTtcclxuLy8gICByZXR1cm4gPHNwYW4+5Y6755m75b2VPC9zcGFuPjtcclxuLy8gfTtcclxuXHJcbmZ1bmN0aW9uIEluZGV4KHsgdXNlclJlcG9zLCB1c2VyU3RhcmVkUmVwb3MsIGlzTG9naW4gfSkge1xyXG4gIGNvbnNvbGUubG9nKGlzTG9naW4pO1xyXG4gIGNvbnNvbGUubG9nKHVzZXJSZXBvcyk7XHJcbiAgY29uc29sZS5sb2codXNlclN0YXJlZFJlcG9zKTtcclxuICBpZiAoIWlzTG9naW4pIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm9vdFwiPlxyXG4gICAgICAgIDxwPuS6su+8jOaCqOi/mOayoeacieeZu+W9leWTpn48L3A+XHJcbiAgICAgICAgPEJ1dHRvbiB0eXBlPVwicHJpbWFyeVwiIGhyZWY9e3B1YmxpY1J1bnRpbWVDb25maWcuT0FVVEhfVVJMfT5cclxuICAgICAgICAgIOeCueWHu+eZu+W9lVxyXG4gICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgIDxzdHlsZSBqc3g+XHJcbiAgICAgICAgICB7YFxyXG4gICAgICAgICAgICAucm9vdCB7XHJcbiAgICAgICAgICAgICAgaGVpZ2h0OiA0MDBweDtcclxuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgYWxpZ24taXRlbTogY2VudGVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfVxyXG4gICAgICAgIDwvc3R5bGU+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiA8c3Bhbj7ljrvnmbvlvZU8L3NwYW4+O1xyXG59XHJcbi8vIOazqOaEj+aIkeS7rOWcqOe7hOS7tuS4re+8iGdldEluaXRpYWxQcm9wc++8ieS4re+8jOWPquS8muS9v+eUqOWIsCByZXF1ZXN0IO+8jOWboOS4uiByZXF1ZXN0IOS8muW4ruWKqeaIkeS7rOWOu+WIpOaWreaYr+WuouaIt+err+i/mOaYr+acjeWKoeerr1xyXG5cclxuLy8g5rOo5oSPIGdldEluaXRpYWxQcm9wcyDkvJrlnKjlrqLmiLfnq6/kuI3lkIzpobXpnaLot7PovaznmoTml7blgJnkvb/nlKjvvIzlkIzmoLfmnI3liqHnq6/lpoLmnpzmiJHku6zorr/pl67nmoTmmK8gaW5kZXgg6L+Z5Liq6aG16Z2i77yM5Lmf5Lya6LCD55SoIGdldEluaXRpYWxQcm9wc++8jOWcqOacjeWKoeerr+a4suafk+eahOaXtuWAmeiwg+eUqOeahOaXtuWAme+8jOaIkeS7rOeahOi/kOihjOeOr+Wig+WkhOS6jiBub2RlLmpzIOeOr+Wig++8jOiAjOS4jeaYr+a1j+iniOWZqOeahOeOr+Wig++8jOWmguaenOaIkeS7rOWcqCBub2RlLmpzIOeahOeOr+Wig+S4i+ivt+axguWwseS8muWHuueOsOivt+axgueahOaYryBodHRwOi8vbG9jYWxob3N0OjMwMDAvIOi/meagt+eahOWcsOWdgO+8jOaJgOS7peS8muWksei0pe+8iOm7mOiupOeahOerr+WPo+aYrzgw77yJXHJcblxyXG4vLyDms6jmhI/ov5nph4zmmK8gY3R4IOiAjOS4jeaYryB7Y3R4fVxyXG5JbmRleC5nZXRJbml0aWFsUHJvcHMgPSBhc3luYyAoY3R4KSA9PiB7XHJcbiAgLy8g5oqlIEVycm9yOiBjb25uZWN0IEVDT05OUkVGVVNFRCAxMjcuMC4wLjE6ODAg55qE6ZSZ6K+vXHJcbiAgLy8g5aaC5p6c5piv5Zyo5rWP6KeI5Zmo6YeM6Z2i5Y+R6YCB55qE77yM5Lya5qC55o2u5oiR5Lus5o+Q5L6b55qE6Lev5b6E5Lya6Ieq5Yqo5Yqg5LiK5oiR5Lus5b2T5YmN572R56uZ55qE5Z+f5ZCN77yI5bCx5pivaHR0cDovL2xvY2FsaG9zdDozMDAwL++8ieaJgOS7peWug+WujOaVtOivt+axgui3r+W+hOWwseaYryBodHRwOi8vbG9jYWxob3N0OjMwMDAvZ2l0aHViL3NlYXJjaC9yZXBvc2l0b3JpZXM/cT1yZWFjdFxyXG4gIC8vIOWmguaenOaYr+WcqOacjeWKoeerr+a4suafk+eahOaXtuWAmei/m+ihjOaJp+ihjOeahOivne+8jOaJgOS7peayoeaciea1j+iniOWZqOmHjOmdoueahOWfn+WQjeeahO+8jOi/meS4quaXtuWAmeivt+axgueahOi3r+W+hOiHquWKqOWcqCBheGlvcyDph4zpnaLlop7liqDnmoQgaHR0cDovLzEyNy4wLjAuMe+8iOm7mOiupDgw56uv5Y+j77yJL2dpdGh1Yi9zZWFyY2gvcmVwb3NpdG9yaWVzP3E9cmVhY3TvvIzov5nkuKrml7blgJnlsLHkuI3lr7nkuobvvIzmiJHku6wgODAg56uv5Y+j5rKh5pyJ5ZCv5Yqo77yM5Lmf5LiN5piv5oiR5Lus5oOz6K+35rGC55qE5Zyw5Z2AXHJcbiAgLy8gY29uc3QgcmVzdWx0ID0gYXdhaXQgYXhpb3NcclxuICAvLyAgIC5nZXQoXCIvZ2l0aHViL3NlYXJjaC9yZXBvc2l0b3JpZXM/cT1yZWFjdFwiKVxyXG4gIC8vICAgLnRoZW4oKHJlc3ApID0+IGNvbnNvbGUubG9nKHJlc3ApKTtcclxuXHJcbiAgLy8g5rOo5oSPIHJlcSDlkowgcmVzIOWPquacieWcqOacjeWKoeerr+a4suafk+eahOaXtuWAmeaJjeS8muaciVxyXG5cclxuICAvLyDms6jmhI/kuIDml6bnmbvlh7rkuobvvIzmiJHku6zpnIDopoHlgZrkuKror7fmsYLnmoTliKTmlq1cclxuICAvLyDlj6/ku6XpgJrov4cgY3R4LnJlcSDlkowgY3R4LnJlcyDvvIhub2RlLmpzIOWvueixoe+8jOS4jeS8muWtmOWcqOS6jua1j+iniOWZqOi/kOihjOeOr+Wig+mHjOmdoueahO+8ieadpei/m+ihjOWIpOaWre+8jOS9huaYr+WcqOespuWQiOWcqOacjeWKoeerr+WPr+S7peWIpOaWreOAguWcqOWuouaIt+err+i/m+ihjOWIpOaWre+8jOaYr+ayoeaciSBjdHgg5a+56LGh55qE44CCXHJcblxyXG4gIC8vIOWPkei1t+ivt+axgu+8jOWIl+WHuuS9oOaJgOacieeahOWIm+W7uueahOS7k+W6k1xyXG4gIGNvbnN0IHVzZXJSZXBvcyA9IGF3YWl0IGFwaS5yZXF1ZXN0KHsgdXJsOiBcIi91c2VyL3JlcG9zXCIgfSwgY3R4LnJlcSwgY3R4LnJlcyk7XHJcbiAgLy8g6KKr5YWz5rOo55qE5LuT5bqTXHJcbiAgY29uc3QgdXNlclN0YXJlZFJlcG9zID0gYXdhaXQgYXBpLnJlcXVlc3QoXHJcbiAgICB7IHVybDogXCIvZ2lzdHMvc3RhcnJlZFwiIH0sXHJcbiAgICBjdHgucmVxLFxyXG4gICAgY3R4LnJlc1xyXG4gICk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBpc0xvZ2luOiB0cnVlLFxyXG4gICAgdXNlclJlcG9zOiB1c2VyUmVwb3MuZGF0YSxcclxuICAgIHVzZXJTdGFyZWRSZXBvczogdXNlclN0YXJlZFJlcG9zLmRhdGEsXHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEluZGV4O1xyXG4iXX0= */\\n/*@ sourceURL=C:\\\\\\\\Users\\\\\\\\pc\\\\\\\\Desktop\\\\\\\\\\u6155\\u8BFE\\u5B66\\u4E60\\\\\\\\nextjs-create-app\\\\\\\\pages\\\\\\\\index.js */\"\n      }, void 0, false, void 0, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"\\u53BB\\u767B\\u5F55\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n} // 注意我们在组件中（getInitialProps）中，只会使用到 request ，因为 request 会帮助我们去判断是客户端还是服务端\n// 注意 getInitialProps 会在客户端不同页面跳转的时候使用，同样服务端如果我们访问的是 index 这个页面，也会调用 getInitialProps，在服务端渲染的时候调用的时候，我们的运行环境处于 node.js 环境，而不是浏览器的环境，如果我们在 node.js 的环境下请求就会出现请求的是 http://localhost:3000/ 这样的地址，所以会失败（默认的端口是80）\n// 注意这里是 ctx 而不是 {ctx}\n\n\nIndex.getInitialProps = async ctx => {\n  // 报 Error: connect ECONNREFUSED 127.0.0.1:80 的错误\n  // 如果是在浏览器里面发送的，会根据我们提供的路径会自动加上我们当前网站的域名（就是http://localhost:3000/）所以它完整请求路径就是 http://localhost:3000/github/search/repositories?q=react\n  // 如果是在服务端渲染的时候进行执行的话，所以没有浏览器里面的域名的，这个时候请求的路径自动在 axios 里面增加的 http://127.0.0.1（默认80端口）/github/search/repositories?q=react，这个时候就不对了，我们 80 端口没有启动，也不是我们想请求的地址\n  // const result = await axios\n  //   .get(\"/github/search/repositories?q=react\")\n  //   .then((resp) => console.log(resp));\n  // 注意 req 和 res 只有在服务端渲染的时候才会有\n  // 注意一旦登出了，我们需要做个请求的判断\n  // 可以通过 ctx.req 和 ctx.res （node.js 对象，不会存在于浏览器运行环境里面的）来进行判断，但是在符合在服务端可以判断。在客户端进行判断，是没有 ctx 对象的。\n  // 发起请求，列出你所有的创建的仓库\n  const userRepos = await api.request({\n    url: \"/user/repos\"\n  }, ctx.req, ctx.res); // 被关注的仓库\n\n  const userStaredRepos = await api.request({\n    url: \"/gists/starred\"\n  }, ctx.req, ctx.res);\n  return {\n    isLogin: true,\n    userRepos: userRepos.data,\n    userStaredRepos: userStaredRepos.data\n  };\n};\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/pc/Desktop/慕课学习/nextjs-create-app/pages/index.js"],"names":["api","require","getConfig","publicRuntimeConfig","Index","userRepos","userStaredRepos","isLogin","console","log","OAUTH_URL","getInitialProps","ctx","request","url","req","res","data"],"mappings":";;;;;AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,YAAD,CAAnB;;AAIA,OAAOC,SAAP,MAAsB,aAAtB;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA0BD,SAAS,EAAzC,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASE,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,eAAb;AAA8BC,EAAAA;AAA9B,CAAf,EAAwD;AACtDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,eAAZ;;AACA,MAAI,CAACC,OAAL,EAAc;AACZ,wBACE;AAAA,0CAAe,MAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,IAAI,EAAEJ,mBAAmB,CAACO,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD;;AAED,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CACD;AAEA;AAEA;;;AACAN,KAAK,CAACO,eAAN,GAAwB,MAAOC,GAAP,IAAe;AACrC;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA,QAAMP,SAAS,GAAG,MAAML,GAAG,CAACa,OAAJ,CAAY;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAAZ,EAAoCF,GAAG,CAACG,GAAxC,EAA6CH,GAAG,CAACI,GAAjD,CAAxB,CAdqC,CAerC;;AACA,QAAMV,eAAe,GAAG,MAAMN,GAAG,CAACa,OAAJ,CAC5B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAD4B,EAE5BF,GAAG,CAACG,GAFwB,EAG5BH,GAAG,CAACI,GAHwB,CAA9B;AAMA,SAAO;AACLT,IAAAA,OAAO,EAAE,IADJ;AAELF,IAAAA,SAAS,EAAEA,SAAS,CAACY,IAFhB;AAGLX,IAAAA,eAAe,EAAEA,eAAe,CAACW;AAH5B,GAAP;AAKD,CA3BD;;AA6BA,eAAeb,KAAf","sourcesContent":["const api = require(\"../lib/api\");\r\n\r\nimport { Button } from \"antd\";\r\n\r\nimport getConfig from \"next/config\";\r\nconst { publicRuntimeConfig } = getConfig();\r\n\r\n// const Index = ({ Component, pageProps, reduxStore }) => {\r\n//   // console.log(isLogin);\r\n//   // console.log(userRepos);\r\n//   // console.log(userStaredRepos);\r\n//   return <span>去登录</span>;\r\n// };\r\n\r\nfunction Index({ userRepos, userStaredRepos, isLogin }) {\r\n  console.log(isLogin);\r\n  console.log(userRepos);\r\n  console.log(userStaredRepos);\r\n  if (!isLogin) {\r\n    return (\r\n      <div className=\"root\">\r\n        <p>亲，您还没有登录哦~</p>\r\n        <Button type=\"primary\" href={publicRuntimeConfig.OAUTH_URL}>\r\n          点击登录\r\n        </Button>\r\n        <style jsx>\r\n          {`\r\n            .root {\r\n              height: 400px;\r\n              display: flex;\r\n              flex-direction: column;\r\n              justify-content: center;\r\n              align-item: center;\r\n            }\r\n          `}\r\n        </style>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <span>去登录</span>;\r\n}\r\n// 注意我们在组件中（getInitialProps）中，只会使用到 request ，因为 request 会帮助我们去判断是客户端还是服务端\r\n\r\n// 注意 getInitialProps 会在客户端不同页面跳转的时候使用，同样服务端如果我们访问的是 index 这个页面，也会调用 getInitialProps，在服务端渲染的时候调用的时候，我们的运行环境处于 node.js 环境，而不是浏览器的环境，如果我们在 node.js 的环境下请求就会出现请求的是 http://localhost:3000/ 这样的地址，所以会失败（默认的端口是80）\r\n\r\n// 注意这里是 ctx 而不是 {ctx}\r\nIndex.getInitialProps = async (ctx) => {\r\n  // 报 Error: connect ECONNREFUSED 127.0.0.1:80 的错误\r\n  // 如果是在浏览器里面发送的，会根据我们提供的路径会自动加上我们当前网站的域名（就是http://localhost:3000/）所以它完整请求路径就是 http://localhost:3000/github/search/repositories?q=react\r\n  // 如果是在服务端渲染的时候进行执行的话，所以没有浏览器里面的域名的，这个时候请求的路径自动在 axios 里面增加的 http://127.0.0.1（默认80端口）/github/search/repositories?q=react，这个时候就不对了，我们 80 端口没有启动，也不是我们想请求的地址\r\n  // const result = await axios\r\n  //   .get(\"/github/search/repositories?q=react\")\r\n  //   .then((resp) => console.log(resp));\r\n\r\n  // 注意 req 和 res 只有在服务端渲染的时候才会有\r\n\r\n  // 注意一旦登出了，我们需要做个请求的判断\r\n  // 可以通过 ctx.req 和 ctx.res （node.js 对象，不会存在于浏览器运行环境里面的）来进行判断，但是在符合在服务端可以判断。在客户端进行判断，是没有 ctx 对象的。\r\n\r\n  // 发起请求，列出你所有的创建的仓库\r\n  const userRepos = await api.request({ url: \"/user/repos\" }, ctx.req, ctx.res);\r\n  // 被关注的仓库\r\n  const userStaredRepos = await api.request(\r\n    { url: \"/gists/starred\" },\r\n    ctx.req,\r\n    ctx.res\r\n  );\r\n\r\n  return {\r\n    isLogin: true,\r\n    userRepos: userRepos.data,\r\n    userStaredRepos: userStaredRepos.data,\r\n  };\r\n};\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}