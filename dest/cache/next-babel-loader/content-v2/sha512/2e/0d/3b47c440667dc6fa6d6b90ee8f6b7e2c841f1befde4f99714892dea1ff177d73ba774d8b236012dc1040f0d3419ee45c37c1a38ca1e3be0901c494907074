{"ast":null,"code":"import _Spin from \"antd/lib/spin\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _Select from \"antd/lib/select\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\\\u6155\\u8BFE\\u5B66\\u4E60\\\\nextjs-create-app\\\\components\\\\SearchUser.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useCallback, useRef } from 'react';\nimport api from '../lib/api';\nimport { debounce } from 'lodash';\nvar Option = _Select.Option;\n\nfunction SearchUser(_ref) {\n  _s();\n\n  var _this = this;\n\n  var onChange = _ref.onChange,\n      value = _ref.value;\n  // 等同于 {current:0}\n  var lastFetchIdRef = useRef(0);\n\n  var _useState = useState(false),\n      fetching = _useState[0],\n      setFetching = _useState[1];\n\n  var _useState2 = useState([]),\n      options = _useState2[0],\n      setOptions = _useState2[1];\n\n  var fetchUser = useCallback(debounce(function (value) {\n    lastFetchIdRef.current += 1; // 这个 fetchId 表示执行这次 request 的 id\n\n    var fetchId = lastFetchIdRef.current;\n    setFetching(true);\n    setOptions([]); // 不需要传入 req 和 res ，因为这是一个要用户点输入才会执行的操作，肯定是在浏览器环境执行的内容\n\n    api.request({\n      url: \"/search/users?q=\".concat(value)\n    }).then(function (reps) {\n      // 如果一旦这个 fetchId 和 id 不一致，所以前面的请求是可以抛弃的\n      if (fetchId !== lastFetchIdRef.current) {\n        return;\n      }\n\n      var data = reps.data.items.map(function (user) {\n        return {\n          text: user.login,\n          value: user.login\n        };\n      });\n      console.log(data);\n      setFetching(false);\n      setOptions(data);\n    });\n  }, 500), []); // 用户在下拉框出来选了某个值之后\n\n  var handleChange = function handleChange(value) {\n    // value 是某个 option 的值\n    setOptions([]);\n    setFetching(false);\n    onChange(value);\n  }; // showSearch -> 表示的是 select 具有搜索功能\n  // filterOption -> 用于 Select 组件现成已经有 Option 来出现了，这个时候我们输入框中输入文字，是输入我们现有的已经在 Option 里面的展示的这些内容。 因为我们要展示服务端的内容，所以设置为 false。\n\n\n  return /*#__PURE__*/_jsxDEV(_Select, {\n    style: {\n      width: 200\n    },\n    showSearch: true,\n    notFoundContent: fetching ? /*#__PURE__*/_jsxDEV(_Spin, {\n      size: \"small\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 89\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Nothing Found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 113\n    }, this),\n    filterOption: false,\n    placeholder: \"\\u521B\\u5EFA\\u8005\",\n    allowClear: true,\n    onSearch: fetchUser,\n    onChange: handleChange,\n    value: value,\n    children: options.map(function (ops) {\n      return /*#__PURE__*/_jsxDEV(Option, {\n        value: ops.value,\n        children: ops.text\n      }, ops.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 32\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 12\n  }, this);\n}\n\n_s(SearchUser, \"e4cQ9fw7GhcqepdKW0sg1IDqLaE=\");\n\n_c = SearchUser;\nexport default SearchUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchUser\");","map":{"version":3,"sources":["C:/Users/pc/Desktop/慕课学习/nextjs-create-app/components/SearchUser.jsx"],"names":["useState","useCallback","useRef","api","debounce","Option","SearchUser","onChange","value","lastFetchIdRef","fetching","setFetching","options","setOptions","fetchUser","current","fetchId","request","url","then","reps","data","items","map","user","text","login","console","log","handleChange","width","ops"],"mappings":"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","sourcesContent":["import { useState, useCallback, useRef } from 'react'\r\n\r\nimport { Select, Spin } from 'antd'\r\n\r\nimport api from '../lib/api'\r\n\r\nimport { debounce } from 'lodash'\r\n\r\nconst Option = Select.Option\r\n\r\nfunction SearchUser({ onChange, value }) {\r\n    // 等同于 {current:0}\r\n    const lastFetchIdRef = useRef(0)\r\n\r\n\r\n\r\n    const [fetching, setFetching] = useState(false)\r\n\r\n    const [options, setOptions] = useState([])\r\n\r\n    const fetchUser = useCallback(debounce(value => {\r\n\r\n        lastFetchIdRef.current += 1\r\n        // 这个 fetchId 表示执行这次 request 的 id\r\n        const fetchId = lastFetchIdRef.current\r\n\r\n        setFetching(true)\r\n        setOptions([])\r\n        // 不需要传入 req 和 res ，因为这是一个要用户点输入才会执行的操作，肯定是在浏览器环境执行的内容\r\n        api.request({\r\n            url: `/search/users?q=${value}`\r\n        }).then(reps => {\r\n            // 如果一旦这个 fetchId 和 id 不一致，所以前面的请求是可以抛弃的\r\n            if (fetchId !== lastFetchIdRef.current) {\r\n                return\r\n            }\r\n            const data = reps.data.items.map(user => ({\r\n                text: user.login,\r\n                value: user.login\r\n            }))\r\n            console.log(data);\r\n            setFetching(false)\r\n            setOptions(data)\r\n        })\r\n\r\n\r\n    }, 500), [])\r\n\r\n    // 用户在下拉框出来选了某个值之后\r\n    const handleChange = (value) => {\r\n        // value 是某个 option 的值\r\n        setOptions([])\r\n        setFetching(false)\r\n        onChange(value)\r\n    }\r\n\r\n\r\n\r\n    // showSearch -> 表示的是 select 具有搜索功能\r\n    // filterOption -> 用于 Select 组件现成已经有 Option 来出现了，这个时候我们输入框中输入文字，是输入我们现有的已经在 Option 里面的展示的这些内容。 因为我们要展示服务端的内容，所以设置为 false。\r\n    return <Select style={{ width: 200 }} showSearch={true} notFoundContent={fetching ? <Spin size='small' /> : <span>Nothing Found</span>} filterOption={false} placeholder='创建者' allowClear={true} onSearch={fetchUser} onChange={handleChange} value={value}>\r\n        {\r\n            options.map(ops => <Option value={ops.value} key={ops.value}>{ops.text}</Option>)\r\n        }\r\n    </Select>\r\n\r\n}\r\n\r\nexport default SearchUser"]},"metadata":{},"sourceType":"module"}