{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, combineReducers, applyMiddleware } from \"redux\"; // applyMiddleware 是 redux 的中间件，构建一些第三方的一些扩展 redux 整个应用体系的方法。\n\nimport ReduxThunk from \"redux-thunk\";\nimport aixos from \"axios\";\nimport axios from \"axios\";\nconst userInitialState = {};\nconst LOGOUT = \"LOGOUT\";\nconst UPDATE_USERNAME = \"UPDATE_USERNAME\";\n\nfunction userReducer(state = userInitialState, action) {\n  switch (action.type) {\n    case UPDATE_USERNAME:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        username: action.name\n      });\n\n    default:\n      return state;\n  }\n}\n\nconst allReducers = combineReducers({\n  user: userReducer\n}); // action creators\n\nexport function logout() {\n  return dispatch => {\n    axios.post(\"/logout\").then(resp => {\n      if (resp.status === 200) {\n        dispatch({\n          type: LOGOUT\n        });\n      } else {\n        console.log(\"\", resp);\n      }\n    });\n  };\n} // console.log(store.getState());\n\nexport default function initialzeStore(state) {\n  const store = createStore(allReducers, Object.assign({}, {\n    user: userInitialState\n  }, state), applyMiddleware(ReduxThunk));\n  return store;\n}","map":{"version":3,"sources":["C:/Users/pc/Desktop/慕课学习/nextjs-create-app/store/store.js"],"names":["createStore","combineReducers","applyMiddleware","ReduxThunk","aixos","axios","userInitialState","LOGOUT","UPDATE_USERNAME","userReducer","state","action","type","username","name","allReducers","user","logout","dispatch","post","then","resp","status","console","log","initialzeStore","store","Object","assign"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D,C,CACA;;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,gBAAgB,GAAG,EAAzB;AAEA,MAAMC,MAAM,GAAG,QAAf;AAEA,MAAMC,eAAe,GAAG,iBAAxB;;AACA,SAASC,WAAT,CAAqBC,KAAK,GAAGJ,gBAA7B,EAA+CK,MAA/C,EAAuD;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKJ,eAAL;AACE,6CAEKE,KAFL;AAGEG,QAAAA,QAAQ,EAAEF,MAAM,CAACG;AAHnB;;AAMF;AACE,aAAOJ,KAAP;AATJ;AAWD;;AAED,MAAMK,WAAW,GAAGd,eAAe,CAAC;AAClCe,EAAAA,IAAI,EAAEP;AAD4B,CAAD,CAAnC,C,CAIA;;AACA,OAAO,SAASQ,MAAT,GAAkB;AACvB,SAAQC,QAAD,IAAc;AACnBb,IAAAA,KAAK,CAACc,IAAN,CAAW,SAAX,EAAsBC,IAAtB,CAA4BC,IAAD,IAAU;AACnC,UAAIA,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACvBJ,QAAAA,QAAQ,CAAC;AACPN,UAAAA,IAAI,EAAEL;AADC,SAAD,CAAR;AAGD,OAJD,MAIO;AACLgB,QAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ,EAAgBH,IAAhB;AACD;AACF,KARD;AASD,GAVD;AAWD,C,CAED;;AACA,eAAe,SAASI,cAAT,CAAwBf,KAAxB,EAA+B;AAC5C,QAAMgB,KAAK,GAAG1B,WAAW,CACvBe,WADuB,EAEvBY,MAAM,CAACC,MAAP,CACE,EADF,EAEE;AACEZ,IAAAA,IAAI,EAAEV;AADR,GAFF,EAKEI,KALF,CAFuB,EASvBR,eAAe,CAACC,UAAD,CATQ,CAAzB;AAWA,SAAOuB,KAAP;AACD","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\n// applyMiddleware 是 redux 的中间件，构建一些第三方的一些扩展 redux 整个应用体系的方法。\r\nimport ReduxThunk from \"redux-thunk\";\r\n\r\nimport aixos from \"axios\";\r\nimport axios from \"axios\";\r\n\r\nconst userInitialState = {};\r\n\r\nconst LOGOUT = \"LOGOUT\";\r\n\r\nconst UPDATE_USERNAME = \"UPDATE_USERNAME\";\r\nfunction userReducer(state = userInitialState, action) {\r\n  switch (action.type) {\r\n    case UPDATE_USERNAME:\r\n      return {\r\n        // 注意我们要保持现在的状态更原先一致\r\n        ...state,\r\n        username: action.name,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst allReducers = combineReducers({\r\n  user: userReducer,\r\n});\r\n\r\n// action creators\r\nexport function logout() {\r\n  return (dispatch) => {\r\n    axios.post(\"/logout\").then((resp) => {\r\n      if (resp.status === 200) {\r\n        dispatch({\r\n          type: LOGOUT,\r\n        });\r\n      } else {\r\n        console.log(\"\", resp);\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\n// console.log(store.getState());\r\nexport default function initialzeStore(state) {\r\n  const store = createStore(\r\n    allReducers,\r\n    Object.assign(\r\n      {},\r\n      {\r\n        user: userInitialState,\r\n      },\r\n      state\r\n    ),\r\n    applyMiddleware(ReduxThunk)\r\n  );\r\n  return store;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}