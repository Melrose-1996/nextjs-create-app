{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/pc/Desktop/\\u6155\\u8BFE\\u5B66\\u4E60/nextjs-create-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/pc/Desktop/\\u6155\\u8BFE\\u5B66\\u4E60/nextjs-create-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _Row from \"antd/lib/row\";\nimport _Col from \"antd/lib/col\";\nimport _List from \"antd/lib/list\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\\\u6155\\u8BFE\\u5B66\\u4E60\\\\nextjs-create-app\\\\pages\\\\search.js\";\nimport { withRouter } from \"next/router\";\nimport Router from \"next/router\";\n/**\r\n * sort: 排序方式\r\n * order: 排序顺序\r\n * lang: 仓库的项目开发主语言\r\n * page: 分页页面\r\n *\r\n */\n\nvar api = require(\"../lib/api\"); // 搜索条件\n\n\nvar LANGUAGES = [\"JavaScript\", \"HTML\", \"CSS\", \"TypeScript\", \"Java\", \"Rust\"];\nvar SORT_TYPE = [{\n  name: \"Best Match\"\n}, {\n  name: \"Most Stars\",\n  value: \"stars\",\n  order: \"desc\"\n}, {\n  name: \"Fewest Stars\",\n  value: \"stars\",\n  order: \"asc\"\n}, {\n  name: \"Most Forks\",\n  value: \"forks\",\n  order: \"desc\"\n}, {\n  name: \"Fewest Stars\",\n  value: \"forks\",\n  order: \"asc\"\n}];\nvar selectedItemStyle = {\n  borderLeft: \"2px solid #e36209\",\n  fontWeight: 100\n};\n\nfunction Search(_ref) {\n  var _this = this;\n\n  var router = _ref.router,\n      repos = _ref.repos;\n  // 注意这些数据都没有在 state 里面去创建，希望是这些页面显示的内容完全根据 url 来定的，使得整个组件是个受控的组件，不会产生任何的副作用。\n  // 该路由是 withRouter 传递过来的\n  var _router$query = router.query,\n      sort = _router$query.sort,\n      order = _router$query.order,\n      lang = _router$query.lang,\n      query = _router$query.query; // 用于拼接路径的方法\n  // 注意语言变化了，但是当时选中了一个排序方式，在语言变化的时候，不应该变化其排序，所以要把排序的参数放在 query 里面。\n\n  var handleLanguageChange = function handleLanguageChange(language) {\n    Router.push({\n      pathname: \"/search\",\n      query: {\n        query: query,\n        lang: language,\n        sort: sort,\n        order: order\n      }\n    });\n  };\n\n  var handleSortChange = function handleSortChange(sort) {\n    Router.push({\n      pathname: \"/search\",\n      query: {\n        query: query,\n        lang: lang,\n        sort: sort.value,\n        order: sort.order\n      }\n    });\n  };\n\n  var doSearch = function doSearch(config) {\n    Router.push({\n      pathname: \"/search\",\n      query: config\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"root\",\n    children: /*#__PURE__*/_jsxDEV(_Row, {\n      gutter: 20,\n      children: /*#__PURE__*/_jsxDEV(_Col, {\n        gutter: 6,\n        children: [/*#__PURE__*/_jsxDEV(_List, {\n          bordered: true,\n          header: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"list-header\",\n            children: \"\\u8BED\\u8A00\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 21\n          }, this),\n          style: {\n            marginBottom: 20,\n            marginTop: 10\n          },\n          dataSource: LANGUAGES,\n          renderItem: function renderItem(item) {\n            var selected = lang === item;\n            return /*#__PURE__*/_jsxDEV(_List.Item, {\n              style: selected ? selectedItemStyle : null,\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                onClick: function onClick() {\n                  return handleLanguageChange({\n                    sort: sort,\n                    order: order,\n                    query: query,\n                    lang: item\n                  });\n                },\n                children: item\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 19\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, _this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(_List, {\n          bordered: true,\n          header: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"list-header\",\n            children: \"\\u6392\\u5E8F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 21\n          }, this),\n          style: {\n            marginBottom: 20\n          },\n          dataSource: SORT_TYPE,\n          renderItem: function renderItem(item) {\n            var selected = false;\n\n            if (item.name === \"Best Match\" && !sort) {\n              selected = true;\n            } else if (item.value === sort && item.order === order) {\n              selected = true;\n            }\n\n            return /*#__PURE__*/_jsxDEV(_List.Item, {\n              style: selected ? selectedItemStyle : null,\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                onClick: function onClick() {\n                  return handleSortChange(item);\n                },\n                children: item.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 19\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, _this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Search;\n\nSearch.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var _ctx$query, query, sort, lang, order, page, queryString, result;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ctx$query = ctx.query, query = _ctx$query.query, sort = _ctx$query.sort, lang = _ctx$query.lang, order = _ctx$query.order, page = _ctx$query.page;\n\n            if (query) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              repos: {\n                total_count: 0\n              }\n            });\n\n          case 3:\n            queryString = \"?q=\".concat(query);\n            if (lang) queryString += \"+language:\".concat(lang);\n            if (sort) queryString += \"&sort=\".concat(sort, \"&order=\").concat(order || \"desc\");\n            if (page) queryString += \"&page=\".concat(page);\n            _context.next = 9;\n            return api.request({\n              url: \"/search/repositories\".concat(queryString)\n            }, ctx.req, ctx.res);\n\n          case 9:\n            result = _context.sent;\n            return _context.abrupt(\"return\", {\n              repos: result.data\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default _c2 = withRouter(Search);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Search\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/pc/Desktop/慕课学习/nextjs-create-app/pages/search.js"],"names":["withRouter","Router","api","require","LANGUAGES","SORT_TYPE","name","value","order","selectedItemStyle","borderLeft","fontWeight","Search","router","repos","query","sort","lang","handleLanguageChange","language","push","pathname","handleSortChange","doSearch","config","marginBottom","marginTop","item","selected","getInitialProps","ctx","page","total_count","queryString","request","url","req","res","result","data"],"mappings":";;;;;;;AAAA,SAASA,UAAT,QAA2B,aAA3B;AAIA,OAAOC,MAAP,MAAmB,aAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,GAAG,GAAGC,OAAO,CAAC,YAAD,CAAnB,C,CAEA;;;AACA,IAAMC,SAAS,GAAG,CAAC,YAAD,EAAe,MAAf,EAAuB,KAAvB,EAA8B,YAA9B,EAA4C,MAA5C,EAAoD,MAApD,CAAlB;AAEA,IAAMC,SAAS,GAAG,CAChB;AAAEC,EAAAA,IAAI,EAAE;AAAR,CADgB,EAEhB;AAAEA,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,KAAK,EAAE,OAA7B;AAAsCC,EAAAA,KAAK,EAAE;AAA7C,CAFgB,EAGhB;AAAEF,EAAAA,IAAI,EAAE,cAAR;AAAwBC,EAAAA,KAAK,EAAE,OAA/B;AAAwCC,EAAAA,KAAK,EAAE;AAA/C,CAHgB,EAIhB;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,KAAK,EAAE,OAA7B;AAAsCC,EAAAA,KAAK,EAAE;AAA7C,CAJgB,EAKhB;AAAEF,EAAAA,IAAI,EAAE,cAAR;AAAwBC,EAAAA,KAAK,EAAE,OAA/B;AAAwCC,EAAAA,KAAK,EAAE;AAA/C,CALgB,CAAlB;AAQA,IAAMC,iBAAiB,GAAG;AACxBC,EAAAA,UAAU,EAAE,mBADY;AAExBC,EAAAA,UAAU,EAAE;AAFY,CAA1B;;AAKA,SAASC,MAAT,OAAmC;AAAA;;AAAA,MAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,KAAS,QAATA,KAAS;AACjC;AAEA;AAHiC,sBAIID,MAAM,CAACE,KAJX;AAAA,MAIzBC,IAJyB,iBAIzBA,IAJyB;AAAA,MAInBR,KAJmB,iBAInBA,KAJmB;AAAA,MAIZS,IAJY,iBAIZA,IAJY;AAAA,MAINF,KAJM,iBAINA,KAJM,EAKjC;AACA;;AACA,MAAMG,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,QAAD,EAAc;AACzClB,IAAAA,MAAM,CAACmB,IAAP,CAAY;AACVC,MAAAA,QAAQ,EAAE,SADA;AAEVN,MAAAA,KAAK,EAAE;AACLA,QAAAA,KAAK,EAALA,KADK;AAELE,QAAAA,IAAI,EAAEE,QAFD;AAGLH,QAAAA,IAAI,EAAJA,IAHK;AAILR,QAAAA,KAAK,EAALA;AAJK;AAFG,KAAZ;AASD,GAVD;;AAWA,MAAMc,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACN,IAAD,EAAU;AACjCf,IAAAA,MAAM,CAACmB,IAAP,CAAY;AACVC,MAAAA,QAAQ,EAAE,SADA;AAEVN,MAAAA,KAAK,EAAE;AACLA,QAAAA,KAAK,EAALA,KADK;AAELE,QAAAA,IAAI,EAAJA,IAFK;AAGLD,QAAAA,IAAI,EAAEA,IAAI,CAACT,KAHN;AAILC,QAAAA,KAAK,EAAEQ,IAAI,CAACR;AAJP;AAFG,KAAZ;AASD,GAVD;;AAYA,MAAMe,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD,EAAY;AAC3BvB,IAAAA,MAAM,CAACmB,IAAP,CAAY;AACVC,MAAAA,QAAQ,EAAE,SADA;AAEVN,MAAAA,KAAK,EAAES;AAFG,KAAZ;AAID,GALD;;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACE;AAAK,MAAA,MAAM,EAAE,EAAb;AAAA,6BACE;AAAK,QAAA,MAAM,EAAE,CAAb;AAAA,gCACE;AACE,UAAA,QAAQ,MADV;AAEE,UAAA,MAAM,eAAE;AAAM,YAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFV;AAGE,UAAA,KAAK,EAAE;AAAEC,YAAAA,YAAY,EAAE,EAAhB;AAAoBC,YAAAA,SAAS,EAAE;AAA/B,WAHT;AAIE,UAAA,UAAU,EAAEtB,SAJd;AAKE,UAAA,UAAU,EAAE,oBAACuB,IAAD,EAAU;AACpB,gBAAMC,QAAQ,GAAGX,IAAI,KAAKU,IAA1B;AACA,gCACE,cAAM,IAAN;AAAW,cAAA,KAAK,EAAEC,QAAQ,GAAGnB,iBAAH,GAAuB,IAAjD;AAAA,qCACE;AACE,gBAAA,OAAO,EAAE;AAAA,yBACPS,oBAAoB,CAAC;AAAEF,oBAAAA,IAAI,EAAJA,IAAF;AAAQR,oBAAAA,KAAK,EAALA,KAAR;AAAeO,oBAAAA,KAAK,EAALA,KAAf;AAAsBE,oBAAAA,IAAI,EAAEU;AAA5B,mBAAD,CADb;AAAA,iBADX;AAAA,0BAKGA;AALH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,qBADF;AAWD;AAlBH;AAAA;AAAA;AAAA;AAAA,gBADF,eAqBE;AACE,UAAA,QAAQ,MADV;AAEE,UAAA,MAAM,eAAE;AAAM,YAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFV;AAGE,UAAA,KAAK,EAAE;AAAEF,YAAAA,YAAY,EAAE;AAAhB,WAHT;AAIE,UAAA,UAAU,EAAEpB,SAJd;AAKE,UAAA,UAAU,EAAE,oBAACsB,IAAD,EAAU;AACpB,gBAAIC,QAAQ,GAAG,KAAf;;AACA,gBAAID,IAAI,CAACrB,IAAL,KAAc,YAAd,IAA8B,CAACU,IAAnC,EAAyC;AACvCY,cAAAA,QAAQ,GAAG,IAAX;AACD,aAFD,MAEO,IAAID,IAAI,CAACpB,KAAL,KAAeS,IAAf,IAAuBW,IAAI,CAACnB,KAAL,KAAeA,KAA1C,EAAiD;AACtDoB,cAAAA,QAAQ,GAAG,IAAX;AACD;;AACD,gCACE,cAAM,IAAN;AAAW,cAAA,KAAK,EAAEA,QAAQ,GAAGnB,iBAAH,GAAuB,IAAjD;AAAA,qCACE;AAAG,gBAAA,OAAO,EAAE;AAAA,yBAAMa,gBAAgB,CAACK,IAAD,CAAtB;AAAA,iBAAZ;AAAA,0BAA2CA,IAAI,CAACrB;AAAhD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,qBADF;AAKD;AAjBH;AAAA;AAAA;AAAA;AAAA,gBArBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA+CD;;KApFQM,M;;AAsFTA,MAAM,CAACiB,eAAP;AAAA,uEAAyB,iBAAOC,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yBACoBA,GAAG,CAACf,KADxB,EACfA,KADe,cACfA,KADe,EACRC,IADQ,cACRA,IADQ,EACFC,IADE,cACFA,IADE,EACIT,KADJ,cACIA,KADJ,EACWuB,IADX,cACWA,IADX;;AAAA,gBAElBhB,KAFkB;AAAA;AAAA;AAAA;;AAAA,6CAGd;AACLD,cAAAA,KAAK,EAAE;AACLkB,gBAAAA,WAAW,EAAE;AADR;AADF,aAHc;;AAAA;AASnBC,YAAAA,WATmB,gBASClB,KATD;AAUvB,gBAAIE,IAAJ,EAAUgB,WAAW,wBAAiBhB,IAAjB,CAAX;AACV,gBAAID,IAAJ,EAAUiB,WAAW,oBAAajB,IAAb,oBAA2BR,KAAK,IAAI,MAApC,CAAX;AACV,gBAAIuB,IAAJ,EAAUE,WAAW,oBAAaF,IAAb,CAAX;AAZa;AAAA,mBAaF7B,GAAG,CAACgC,OAAJ,CACnB;AACEC,cAAAA,GAAG,gCAAyBF,WAAzB;AADL,aADmB,EAInBH,GAAG,CAACM,GAJe,EAKnBN,GAAG,CAACO,GALe,CAbE;;AAAA;AAajBC,YAAAA,MAbiB;AAAA,6CAqBhB;AACLxB,cAAAA,KAAK,EAAEwB,MAAM,CAACC;AADT,aArBgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAAA;AAAA;AAAA;AAAA;;AA0BA,qBAAevC,UAAU,CAACY,MAAD,CAAzB","sourcesContent":["import { withRouter } from \"next/router\";\r\n\r\nimport { Row, Col, List } from \"antd\";\r\n\r\nimport Router from \"next/router\";\r\n/**\r\n * sort: 排序方式\r\n * order: 排序顺序\r\n * lang: 仓库的项目开发主语言\r\n * page: 分页页面\r\n *\r\n */\r\n\r\nconst api = require(\"../lib/api\");\r\n\r\n// 搜索条件\r\nconst LANGUAGES = [\"JavaScript\", \"HTML\", \"CSS\", \"TypeScript\", \"Java\", \"Rust\"];\r\n\r\nconst SORT_TYPE = [\r\n  { name: \"Best Match\" },\r\n  { name: \"Most Stars\", value: \"stars\", order: \"desc\" },\r\n  { name: \"Fewest Stars\", value: \"stars\", order: \"asc\" },\r\n  { name: \"Most Forks\", value: \"forks\", order: \"desc\" },\r\n  { name: \"Fewest Stars\", value: \"forks\", order: \"asc\" },\r\n];\r\n\r\nconst selectedItemStyle = {\r\n  borderLeft: \"2px solid #e36209\",\r\n  fontWeight: 100,\r\n};\r\n\r\nfunction Search({ router, repos }) {\r\n  // 注意这些数据都没有在 state 里面去创建，希望是这些页面显示的内容完全根据 url 来定的，使得整个组件是个受控的组件，不会产生任何的副作用。\r\n\r\n  // 该路由是 withRouter 传递过来的\r\n  const { sort, order, lang, query } = router.query;\r\n  // 用于拼接路径的方法\r\n  // 注意语言变化了，但是当时选中了一个排序方式，在语言变化的时候，不应该变化其排序，所以要把排序的参数放在 query 里面。\r\n  const handleLanguageChange = (language) => {\r\n    Router.push({\r\n      pathname: \"/search\",\r\n      query: {\r\n        query,\r\n        lang: language,\r\n        sort,\r\n        order,\r\n      },\r\n    });\r\n  };\r\n  const handleSortChange = (sort) => {\r\n    Router.push({\r\n      pathname: \"/search\",\r\n      query: {\r\n        query,\r\n        lang,\r\n        sort: sort.value,\r\n        order: sort.order,\r\n      },\r\n    });\r\n  };\r\n\r\n  const doSearch = (config) => {\r\n    Router.push({\r\n      pathname: \"/search\",\r\n      query: config,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"root\">\r\n      <Row gutter={20}>\r\n        <Col gutter={6}>\r\n          <List\r\n            bordered\r\n            header={<span className=\"list-header\">语言</span>}\r\n            style={{ marginBottom: 20, marginTop: 10 }}\r\n            dataSource={LANGUAGES}\r\n            renderItem={(item) => {\r\n              const selected = lang === item;\r\n              return (\r\n                <List.Item style={selected ? selectedItemStyle : null}>\r\n                  <a\r\n                    onClick={() =>\r\n                      handleLanguageChange({ sort, order, query, lang: item })\r\n                    }\r\n                  >\r\n                    {item}\r\n                  </a>\r\n                </List.Item>\r\n              );\r\n            }}\r\n          />\r\n          <List\r\n            bordered\r\n            header={<span className=\"list-header\">排序</span>}\r\n            style={{ marginBottom: 20 }}\r\n            dataSource={SORT_TYPE}\r\n            renderItem={(item) => {\r\n              let selected = false;\r\n              if (item.name === \"Best Match\" && !sort) {\r\n                selected = true;\r\n              } else if (item.value === sort && item.order === order) {\r\n                selected = true;\r\n              }\r\n              return (\r\n                <List.Item style={selected ? selectedItemStyle : null}>\r\n                  <a onClick={() => handleSortChange(item)}>{item.name}</a>\r\n                </List.Item>\r\n              );\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nSearch.getInitialProps = async (ctx) => {\r\n  const { query, sort, lang, order, page } = ctx.query;\r\n  if (!query) {\r\n    return {\r\n      repos: {\r\n        total_count: 0,\r\n      },\r\n    };\r\n  }\r\n  let queryString = `?q=${query}`;\r\n  if (lang) queryString += `+language:${lang}`;\r\n  if (sort) queryString += `&sort=${sort}&order=${order || \"desc\"}`;\r\n  if (page) queryString += `&page=${page}`;\r\n  const result = await api.request(\r\n    {\r\n      url: `/search/repositories${queryString}`,\r\n    },\r\n    ctx.req,\r\n    ctx.res\r\n  );\r\n\r\n  return {\r\n    repos: result.data,\r\n  };\r\n};\r\n\r\nexport default withRouter(Search);\r\n"]},"metadata":{},"sourceType":"module"}