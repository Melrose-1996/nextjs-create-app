{"ast":null,"code":"import _Row from \"antd/lib/row\";\nimport _Col from \"antd/lib/col\";\nimport _List from \"antd/lib/list\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\\\u6155\\u8BFE\\u5B66\\u4E60\\\\nextjs-create-app\\\\pages\\\\search.js\";\nimport { useCallback } from \"react\";\nimport { withRouter } from \"next/router\";\nimport Router from \"next/router\";\n/**\r\n * sort: 排序方式\r\n * order: 排序顺序\r\n * lang: 仓库的项目开发主语言\r\n * page: 分页页面\r\n *\r\n */\n\nconst api = require(\"../lib/api\"); // 搜索条件\n\n\nconst LANGUAGES = [\"JavaScript\", \"HTML\", \"CSS\", \"TypeScript\", \"Java\", \"Rust\"];\nconst SORT_TYPE = [{\n  name: \"Best Match\"\n}, {\n  name: \"Most Stars\",\n  value: \"stars\",\n  order: \"desc\"\n}, {\n  name: \"Fewest Stars\",\n  value: \"stars\",\n  order: \"asc\"\n}, {\n  name: \"Most Forks\",\n  value: \"forks\",\n  order: \"desc\"\n}, {\n  name: \"Fewest Stars\",\n  value: \"forks\",\n  order: \"asc\"\n}];\nconst selectedItemStyle = {\n  borderLeft: \"2px solid #e36209\",\n  fontWeight: 100\n}; // 这是一个纯粹的方法，方法一旦什么\n\nconst doSearch = useCallback(config => {\n  Router.push({\n    pathname: \"/search\",\n    query: config\n  });\n}, []);\n\nfunction Search({\n  router,\n  repos\n}) {\n  // 注意这些数据都没有在 state 里面去创建，希望是这些页面显示的内容完全根据 url 来定的，使得整个组件是个受控的组件，不会产生任何的副作用。\n  // 该路由是 withRouter 传递过来的\n  const {\n    sort,\n    order,\n    lang,\n    query\n  } = router.query; // 用于拼接路径的方法\n  // 注意语言变化了，但是当时选中了一个排序方式，在语言变化的时候，不应该变化其排序，所以要把排序的参数放在 query 里面。\n  // const handleLanguageChange = (language) => {\n  //   Router.push({\n  //     pathname: \"/search\",\n  //     query: {\n  //       query,\n  //       lang: language,\n  //       sort,\n  //       order,\n  //     },\n  //   });\n  // };\n  // const handleSortChange = (sort) => {\n  //   Router.push({\n  //     pathname: \"/search\",\n  //     query: {\n  //       query,\n  //       lang,\n  //       sort: sort.value,\n  //       order: sort.order,\n  //     },\n  //   });\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"root\",\n    children: /*#__PURE__*/_jsxDEV(_Row, {\n      gutter: 20,\n      children: /*#__PURE__*/_jsxDEV(_Col, {\n        gutter: 6,\n        children: [/*#__PURE__*/_jsxDEV(_List, {\n          bordered: true,\n          header: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"list-header\",\n            children: \"\\u8BED\\u8A00\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 21\n          }, this),\n          style: {\n            marginBottom: 20,\n            marginTop: 10\n          },\n          dataSource: LANGUAGES,\n          renderItem: item => {\n            const selected = lang === item;\n            return /*#__PURE__*/_jsxDEV(_List.Item, {\n              style: selected ? selectedItemStyle : null,\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                onClick: () => doSearch({\n                  sort,\n                  order,\n                  query,\n                  lang: item\n                }),\n                children: item\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 17\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(_List, {\n          bordered: true,\n          header: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"list-header\",\n            children: \"\\u6392\\u5E8F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 21\n          }, this),\n          style: {\n            marginBottom: 20\n          },\n          dataSource: SORT_TYPE,\n          renderItem: item => {\n            let selected = false;\n\n            if (item.name === \"Best Match\" && !sort) {\n              selected = true;\n            } else if (item.value === sort && item.order === order) {\n              selected = true;\n            }\n\n            return /*#__PURE__*/_jsxDEV(_List.Item, {\n              style: selected ? selectedItemStyle : null,\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                onClick: () => doSearch({\n                  sort: item.value || \"\",\n                  order: item.order || \"\",\n                  query,\n                  lang\n                }),\n                children: item.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\nSearch.getInitialProps = async ctx => {\n  const {\n    query,\n    sort,\n    lang,\n    order,\n    page\n  } = ctx.query;\n\n  if (!query) {\n    return {\n      repos: {\n        total_count: 0\n      }\n    };\n  }\n\n  let queryString = `?q=${query}`;\n  if (lang) queryString += `+language:${lang}`;\n  if (sort) queryString += `&sort=${sort}&order=${order || \"desc\"}`;\n  if (page) queryString += `&page=${page}`;\n  const result = await api.request({\n    url: `/search/repositories${queryString}`\n  }, ctx.req, ctx.res);\n  return {\n    repos: result.data\n  };\n};\n\nexport default withRouter(Search);","map":{"version":3,"sources":["C:/Users/pc/Desktop/慕课学习/nextjs-create-app/pages/search.js"],"names":["useCallback","withRouter","Router","api","require","LANGUAGES","SORT_TYPE","name","value","order","selectedItemStyle","borderLeft","fontWeight","doSearch","config","push","pathname","query","Search","router","repos","sort","lang","marginBottom","marginTop","item","selected","getInitialProps","ctx","page","total_count","queryString","result","request","url","req","res","data"],"mappings":"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","sourcesContent":["import { useCallback } from \"react\";\r\n\r\nimport { withRouter } from \"next/router\";\r\n\r\nimport { Row, Col, List } from \"antd\";\r\n\r\nimport Router from \"next/router\";\r\n/**\r\n * sort: 排序方式\r\n * order: 排序顺序\r\n * lang: 仓库的项目开发主语言\r\n * page: 分页页面\r\n *\r\n */\r\n\r\nconst api = require(\"../lib/api\");\r\n\r\n// 搜索条件\r\nconst LANGUAGES = [\"JavaScript\", \"HTML\", \"CSS\", \"TypeScript\", \"Java\", \"Rust\"];\r\n\r\nconst SORT_TYPE = [\r\n  { name: \"Best Match\" },\r\n  { name: \"Most Stars\", value: \"stars\", order: \"desc\" },\r\n  { name: \"Fewest Stars\", value: \"stars\", order: \"asc\" },\r\n  { name: \"Most Forks\", value: \"forks\", order: \"desc\" },\r\n  { name: \"Fewest Stars\", value: \"forks\", order: \"asc\" },\r\n];\r\n\r\nconst selectedItemStyle = {\r\n  borderLeft: \"2px solid #e36209\",\r\n  fontWeight: 100,\r\n};\r\n\r\n// 这是一个纯粹的方法，方法一旦什么\r\nconst doSearch = useCallback((config) => {\r\n  Router.push({\r\n    pathname: \"/search\",\r\n    query: config,\r\n  });\r\n}, []);\r\n\r\nfunction Search({ router, repos }) {\r\n  // 注意这些数据都没有在 state 里面去创建，希望是这些页面显示的内容完全根据 url 来定的，使得整个组件是个受控的组件，不会产生任何的副作用。\r\n\r\n  // 该路由是 withRouter 传递过来的\r\n  const { sort, order, lang, query } = router.query;\r\n  // 用于拼接路径的方法\r\n  // 注意语言变化了，但是当时选中了一个排序方式，在语言变化的时候，不应该变化其排序，所以要把排序的参数放在 query 里面。\r\n  // const handleLanguageChange = (language) => {\r\n  //   Router.push({\r\n  //     pathname: \"/search\",\r\n  //     query: {\r\n  //       query,\r\n  //       lang: language,\r\n  //       sort,\r\n  //       order,\r\n  //     },\r\n  //   });\r\n  // };\r\n  // const handleSortChange = (sort) => {\r\n  //   Router.push({\r\n  //     pathname: \"/search\",\r\n  //     query: {\r\n  //       query,\r\n  //       lang,\r\n  //       sort: sort.value,\r\n  //       order: sort.order,\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  return (\r\n    <div className=\"root\">\r\n      <Row gutter={20}>\r\n        <Col gutter={6}>\r\n          <List\r\n            bordered\r\n            header={<span className=\"list-header\">语言</span>}\r\n            style={{ marginBottom: 20, marginTop: 10 }}\r\n            dataSource={LANGUAGES}\r\n            renderItem={(item) => {\r\n              const selected = lang === item;\r\n              return (\r\n                <List.Item style={selected ? selectedItemStyle : null}>\r\n                  <a\r\n                    onClick={() => doSearch({ sort, order, query, lang: item })}\r\n                  >\r\n                    {item}\r\n                  </a>\r\n                </List.Item>\r\n              );\r\n            }}\r\n          />\r\n          <List\r\n            bordered\r\n            header={<span className=\"list-header\">排序</span>}\r\n            style={{ marginBottom: 20 }}\r\n            dataSource={SORT_TYPE}\r\n            renderItem={(item) => {\r\n              let selected = false;\r\n              if (item.name === \"Best Match\" && !sort) {\r\n                selected = true;\r\n              } else if (item.value === sort && item.order === order) {\r\n                selected = true;\r\n              }\r\n              return (\r\n                <List.Item style={selected ? selectedItemStyle : null}>\r\n                  <a\r\n                    onClick={() =>\r\n                      doSearch({\r\n                        sort: item.value || \"\",\r\n                        order: item.order || \"\",\r\n                        query,\r\n                        lang,\r\n                      })\r\n                    }\r\n                  >\r\n                    {item.name}\r\n                  </a>\r\n                </List.Item>\r\n              );\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nSearch.getInitialProps = async (ctx) => {\r\n  const { query, sort, lang, order, page } = ctx.query;\r\n  if (!query) {\r\n    return {\r\n      repos: {\r\n        total_count: 0,\r\n      },\r\n    };\r\n  }\r\n  let queryString = `?q=${query}`;\r\n  if (lang) queryString += `+language:${lang}`;\r\n  if (sort) queryString += `&sort=${sort}&order=${order || \"desc\"}`;\r\n  if (page) queryString += `&page=${page}`;\r\n  const result = await api.request(\r\n    {\r\n      url: `/search/repositories${queryString}`,\r\n    },\r\n    ctx.req,\r\n    ctx.res\r\n  );\r\n\r\n  return {\r\n    repos: result.data,\r\n  };\r\n};\r\n\r\nexport default withRouter(Search);\r\n"]},"metadata":{},"sourceType":"module"}