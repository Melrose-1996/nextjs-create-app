{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\\\u6155\\u8BFE\\u5B66\\u4E60\\\\nextjs-create-app\\\\components\\\\MarkFdownRenderer.jsx\";\nimport { memo, useMemo } from 'react'; // 具体渲染内容都是跟 props 有关，如果 props 没有变化，则无需重新渲染\n\nimport MarkdownIt from \"markdown-it\";\nimport \"github-markdown-css\"; // html: true -- 当传递了这个参数会把我们的 html 中的内容转化成 html\n// linkify: true -- 当 html 里面有链接就会转化为可以点击的链接\n\nconst md = new MarkdownIt({\n  html: true,\n  linkify: true\n}); // 中文解码\n\nfunction b64_to_utf8(str) {\n  return decodeURIComponent(escape(atob(str)));\n}\n\nexport default /*#__PURE__*/memo(function markdownRenderer({\n  content,\n  isBase64\n}) {\n  const markdown = isBase64 ? b64_to_utf8(content) : content; // markdown 的内容没有变化，则 html 的内容就不会变化(md.render 转化过程比较耗时)\n\n  const html = useMemo(() => md.render(markdown), [markdown]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"markdown-body\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: html\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n});","map":{"version":3,"sources":["C:/Users/pc/Desktop/慕课学习/nextjs-create-app/components/MarkFdownRenderer.jsx"],"names":["memo","useMemo","MarkdownIt","md","html","linkify","b64_to_utf8","str","decodeURIComponent","escape","atob","markdownRenderer","content","isBase64","markdown","render","__html"],"mappings":";;AAAA,SAASA,IAAT,EAAeC,OAAf,QAA8B,OAA9B,C,CACA;;AAEA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,qBAAP,C,CAGA;AACA;;AACA,MAAMC,EAAE,GAAG,IAAID,UAAJ,CAAe;AACtBE,EAAAA,IAAI,EAAE,IADgB;AAEtBC,EAAAA,OAAO,EAAE;AAFa,CAAf,CAAX,C,CAMA;;AACA,SAASC,WAAT,CAAqBC,GAArB,EAA0B;AACtB,SAAOC,kBAAkB,CAACC,MAAM,CAACC,IAAI,CAACH,GAAD,CAAL,CAAP,CAAzB;AACH;;AAED,4BAAeP,IAAI,CAAC,SAASW,gBAAT,CAA0B;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAA1B,EAAiD;AACjE,QAAMC,QAAQ,GAAGD,QAAQ,GAAGP,WAAW,CAACM,OAAD,CAAd,GAA0BA,OAAnD,CADiE,CAEjE;;AACA,QAAMR,IAAI,GAAGH,OAAO,CAAC,MAAME,EAAE,CAACY,MAAH,CAAUD,QAAV,CAAP,EAA4B,CAACA,QAAD,CAA5B,CAApB;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,4BACI;AAAK,MAAA,uBAAuB,EAAE;AAAEE,QAAAA,MAAM,EAAEZ;AAAV;AAA9B;AAAA;AAAA;AAAA;AAAA,YADJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CATkB,CAAnB","sourcesContent":["import { memo, useMemo } from 'react'\r\n// 具体渲染内容都是跟 props 有关，如果 props 没有变化，则无需重新渲染\r\n\r\nimport MarkdownIt from \"markdown-it\";\r\nimport \"github-markdown-css\";\r\n\r\n\r\n// html: true -- 当传递了这个参数会把我们的 html 中的内容转化成 html\r\n// linkify: true -- 当 html 里面有链接就会转化为可以点击的链接\r\nconst md = new MarkdownIt({\r\n    html: true,\r\n    linkify: true,\r\n});\r\n\r\n\r\n// 中文解码\r\nfunction b64_to_utf8(str) {\r\n    return decodeURIComponent(escape(atob(str)));\r\n}\r\n\r\nexport default memo(function markdownRenderer({ content, isBase64 }) {\r\n    const markdown = isBase64 ? b64_to_utf8(content) : content\r\n    // markdown 的内容没有变化，则 html 的内容就不会变化(md.render 转化过程比较耗时)\r\n    const html = useMemo(() => md.render(markdown), [markdown])\r\n    return (\r\n        <div className=\"markdown-body\">\r\n            <div dangerouslySetInnerHTML={{ __html: html }}></div>;\r\n        </div>\r\n    );\r\n})"]},"metadata":{},"sourceType":"module"}