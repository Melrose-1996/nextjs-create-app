{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/pc/Desktop/\\u6155\\u8BFE\\u5B66\\u4E60/nextjs-create-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/pc/Desktop/\\u6155\\u8BFE\\u5B66\\u4E60/nextjs-create-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _Row from \"antd/lib/row\";\nimport _Pagination from \"antd/lib/pagination\";\nimport _Col from \"antd/lib/col\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _List from \"antd/lib/list\";\nimport _defineProperty from \"C:/Users/pc/Desktop/\\u6155\\u8BFE\\u5B66\\u4E60/nextjs-create-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"C:/Users/pc/Desktop/\\u6155\\u8BFE\\u5B66\\u4E60/nextjs-create-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _JSXStyle from \"styled-jsx/style\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useCallback, memo, isValidElement, useEffect } from \"react\";\nimport { withRouter } from \"next/router\";\nimport Router from \"next/router\";\nimport Link from \"next/link\";\n/**\r\n * sort: 排序方式\r\n * order: 排序顺序\r\n * lang: 仓库的项目开发主语言\r\n * page: 分页页面\r\n *\r\n */\n\nvar api = require(\"../lib/api\");\n\nimport Repo from \"../components/Repo\";\nimport { setArray } from \"../lib/repo-basic-cache\"; // 搜索条件\n\nvar LANGUAGES = [\"JavaScript\", \"HTML\", \"CSS\", \"TypeScript\", \"Java\", \"Rust\"];\nvar SORT_TYPE = [{\n  name: \"Best Match\"\n}, {\n  name: \"Most Stars\",\n  value: \"stars\",\n  order: \"desc\"\n}, {\n  name: \"Fewest Stars\",\n  value: \"stars\",\n  order: \"asc\"\n}, {\n  name: \"Most Forks\",\n  value: \"forks\",\n  order: \"desc\"\n}, {\n  name: \"Fewest Stars\",\n  value: \"forks\",\n  order: \"asc\"\n}];\nvar selectedItemStyle = {\n  borderLeft: \"2px solid #e36209\",\n  fontWeight: 100\n}; // 这是一个纯粹的方法，方法一旦声明，不存在任何副作用\n// const doSearch = useCallback((config) => {\n//   Router.push({\n//     pathname: \"/search\",\n//     query: config,\n//   });\n// }, []);\n// react 是一个组件化的框架，组件依靠 props 和 states 进行运行的，如果能够抽象成 props 那么就可以重新申明一个组件，让组件帮忙使用，在代码维护变得更加简单\n// 防止了组件在点击的过程中重新声明渲染\n// FilterLink 组件是纯粹根据 props 进行更新的，可以 memo 进行优化，当 props 没有进行变化的时候，这个组件不会被重新渲染\n\nvar per_page = 20;\nvar FilterLink = /*#__PURE__*/memo(function (_ref) {\n  var name = _ref.name,\n      query = _ref.query,\n      lang = _ref.lang,\n      sort = _ref.sort,\n      order = _ref.order,\n      page = _ref.page;\n  var queryString = \"?query=\".concat(query);\n  if (lang) queryString += \"&lang=\".concat(lang);\n  if (sort) queryString += \"&sort=\".concat(sort, \"&order=\").concat(order || \"desc\");\n  if (page) queryString += \"&page=\".concat(page);\n  queryString += \"&per_page=\".concat(per_page); // if (page) queryString += `&page=${page}`;\n  // const doSearch = (config) => {\n  //   Router.push({\n  //     pathname: \"/search\",\n  //     query: {\n  //       query,\n  //       lang,\n  //       sort,\n  //       order,\n  //     },\n  //   });\n  // };\n  // 注意 a 标签不放链接，很难去做 SEO ，因为 SEO 会解析 HTML 的内容\n\n  return /*#__PURE__*/_jsx(Link, {\n    href: \"/search\".concat(queryString),\n    children: /*#__PURE__*/isValidElement(name) ? name : /*#__PURE__*/_jsx(\"a\", {\n      children: name\n    })\n  });\n});\n\nvar noop = function noop() {};\n\nvar isServer = false;\n\nfunction Search(_ref2) {\n  var router = _ref2.router,\n      repos = _ref2.repos;\n  console.log(repos); // 注意这些数据都没有在 state 里面去创建，希望是这些页面显示的内容完全根据 url 来定的，使得整个组件是个受控的组件，不会产生任何的副作用。\n  // 该路由是 withRouter 传递过来的\n\n  var querys = _extends({}, router.query);\n\n  var _router$query = router.query,\n      sort = _router$query.sort,\n      order = _router$query.order,\n      lang = _router$query.lang,\n      page = _router$query.page; // 执行这个插入，每次页面渲染的时候，都会去调用它\n  // 需要判断是否是服务端渲染\n  // 服务端渲染对于这段代码是没有必要去执行的，如果重复执行会导致我们的内存没有意义的使用，这段是跟用户的搜索有关的，跟服务端整体渲染是没有关系的，所以需要屏蔽掉。\n\n  useEffect(function () {\n    if (!isServer) setArray(repos.items);\n  }); // 用于拼接路径的方法\n  // 注意语言变化了，但是当时选中了一个排序方式，在语言变化的时候，不应该变化其排序，所以要把排序的参数放在 query 里面。\n  // const handleLanguageChange = (language) => {\n  //   Router.push({\n  //     pathname: \"/search\",\n  //     query: {\n  //       query,\n  //       lang: language,\n  //       sort,\n  //       order,\n  //     },\n  //   });\n  // };\n  // const handleSortChange = (sort) => {\n  //   Router.push({\n  //     pathname: \"/search\",\n  //     query: {\n  //       query,\n  //       lang,\n  //       sort: sort.value,\n  //       order: sort.order,\n  //     },\n  //   });\n  // };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"jsx-2060511232\" + \" \" + \"root\",\n    children: [/*#__PURE__*/_jsxs(_Row, {\n      gutter: 20,\n      children: [/*#__PURE__*/_jsxs(_Col, {\n        gutter: 6,\n        children: [/*#__PURE__*/_jsx(_List, {\n          bordered: true,\n          header: /*#__PURE__*/_jsx(\"span\", {\n            className: \"jsx-2060511232\" + \" \" + \"list-header\",\n            children: \"\\u8BED\\u8A00\"\n          }),\n          style: {\n            marginBottom: 20\n          },\n          dataSource: LANGUAGES,\n          renderItem: function renderItem(item) {\n            var selected = lang === item;\n            return /*#__PURE__*/_jsx(_List.Item, {\n              style: selected ? selectedItemStyle : null,\n              children: selected ? /*#__PURE__*/_jsx(\"span\", {\n                className: \"jsx-2060511232\",\n                children: item\n              }) : /*#__PURE__*/_jsx(FilterLink, _objectSpread(_objectSpread({}, querys), {}, {\n                lang: item,\n                name: item\n              }))\n            });\n          }\n        }), /*#__PURE__*/_jsx(_List, {\n          bordered: true,\n          header: /*#__PURE__*/_jsx(\"span\", {\n            className: \"jsx-2060511232\" + \" \" + \"list-header\",\n            children: \"\\u6392\\u5E8F\"\n          }),\n          style: {\n            marginBottom: 20\n          },\n          dataSource: SORT_TYPE,\n          renderItem: function renderItem(item) {\n            var selected = false;\n\n            if (item.name === \"Best Match\" && !sort) {\n              selected = true;\n            } else if (item.value === sort && item.order === order) {\n              selected = true;\n            }\n\n            return /*#__PURE__*/_jsx(_List.Item, {\n              style: selected ? selectedItemStyle : null,\n              children: selected ? /*#__PURE__*/_jsx(\"span\", {\n                className: \"jsx-2060511232\",\n                children: item.name\n              }) : /*#__PURE__*/_jsx(FilterLink, _objectSpread(_objectSpread({}, querys), {}, {\n                sort: item.value,\n                order: item.order,\n                name: item.name\n              }))\n            });\n          }\n        })]\n      }), /*#__PURE__*/_jsxs(_Col, {\n        span: 18,\n        children: [/*#__PURE__*/_jsxs(\"h3\", {\n          className: \"jsx-2060511232\" + \" \" + \"repos-title\",\n          children: [repos.total_count, \" \\u4E2A\\u4ED3\\u5E93\"]\n        }), repos.items.map(function (repo) {\n          return /*#__PURE__*/_jsx(Repo, {\n            repo: repo\n          }, repo.id);\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"jsx-2060511232\" + \" \" + \"pagination\",\n          children: /*#__PURE__*/_jsx(_Pagination, {\n            pageSize: per_page,\n            current: Number(page) || 1,\n            total: 1000,\n            onChange: noop,\n            itemRender: function itemRender(page, type, ol) {\n              var p = type === \"page\" ? page : type === \"prev\" ? page - 1 : page + 1;\n              var name = type === \"page\" ? page : ol;\n              return /*#__PURE__*/_jsx(FilterLink, _objectSpread(_objectSpread({}, querys), {}, {\n                page: p,\n                name: name\n              }));\n            }\n          })\n        })]\n      })]\n    }), /*#__PURE__*/_jsx(_JSXStyle, {\n      id: \"2060511232\",\n      children: [\".root.jsx-2060511232{padding:20px 0;}\", \".list-header.jsx-2060511232{font-weight:800;font-size:16px;}\", \".repos-title.jsx-2060511232{border-bottom:1px solid #eee;font-size:24px;line-height:50px;}\", \".pagination.jsx-2060511232{padding:20px;text-align:center;}\"]\n    })]\n  });\n}\n\nSearch.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var _ctx$query, query, sort, lang, order, page, queryString, result;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ctx$query = ctx.query, query = _ctx$query.query, sort = _ctx$query.sort, lang = _ctx$query.lang, order = _ctx$query.order, page = _ctx$query.page;\n\n            if (query) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              repos: {\n                total_count: 0\n              }\n            });\n\n          case 3:\n            queryString = \"?q=\".concat(query);\n            if (lang) queryString += \"+language:\".concat(lang);\n            if (sort) queryString += \"&sort=\".concat(sort, \"&order=\").concat(order || \"desc\");\n            if (page) queryString += \"&page=\".concat(page);\n            queryString += \"&per_page=\".concat(per_page);\n            _context.next = 10;\n            return api.request({\n              url: \"/search/repositories\".concat(queryString)\n            }, ctx.req, ctx.res);\n\n          case 10:\n            result = _context.sent;\n            return _context.abrupt(\"return\", {\n              repos: result.data\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default withRouter(Search);","map":null,"metadata":{},"sourceType":"module"}