{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _JSXStyle from \"styled-jsx/style\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useEffect } from 'react';\nimport Repo from \"./Repo\";\nimport Link from \"next/link\";\nimport api from \"../lib/api\";\nimport { withRouter } from \"next/router\";\nimport { getCache, setCache } from '../lib/repo-basic-cache';\nconst isServer = true;\nexport default function withRepo(Comp, type = 'index') {\n  // 这样我们把键值对的形式映射成了一个字符串\n  function makeQuery(queryObj) {\n    // 遍历这个 obj\n    const query = Object.entries(queryObj).reduce((result, entry) => {\n      result.push(entry.join(\"=\"));\n      return result;\n    }, []).join(\"&\");\n    return `?${query}`;\n  }\n\n  function WithDetail(_ref) {\n    let {\n      repoBasic,\n      router\n    } = _ref,\n        rest = _objectWithoutProperties(_ref, [\"repoBasic\", \"router\"]);\n\n    useEffect(() => {\n      // 服务端渲染对于这段代码是没有必要去执行的，如果重复执行会导致我们的内存没有意义的使用，这段是跟用户的搜索有关的，跟服务端整体渲染是没有关系的，所以需要屏蔽掉。\n      if (!isServer) setCache(repoBasic);\n    });\n    const query = makeQuery(router.query);\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: \"jsx-2262278230\" + \" \" + \"root\",\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: \"jsx-2262278230\" + \" \" + \"repo-basic\",\n        children: [/*#__PURE__*/_jsx(Repo, {\n          repo: repoBasic\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"jsx-2262278230\" + \" \" + \"tabs\",\n          children: [type === 'index' ? /*#__PURE__*/_jsx(\"span\", {\n            className: \"jsx-2262278230\" + \" \" + \"tab\",\n            children: \"Readme\"\n          }) : /*#__PURE__*/_jsx(Link, {\n            href: `/detail${query}`,\n            children: /*#__PURE__*/_jsx(\"a\", {\n              className: \"jsx-2262278230\" + \" \" + \"tab index\",\n              children: \"Readme\"\n            })\n          }), type === 'issues' ? /*#__PURE__*/_jsx(\"span\", {\n            className: \"jsx-2262278230\" + \" \" + \"tab\",\n            children: \"Issues\"\n          }) : /*#__PURE__*/_jsx(Link, {\n            href: `/detail/issues${query}`,\n            children: /*#__PURE__*/_jsx(\"a\", {\n              className: \"jsx-2262278230\" + \" \" + \"tab issues\",\n              children: \"Issues\"\n            })\n          })]\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"jsx-2262278230\",\n        children: /*#__PURE__*/_jsx(Comp, _objectSpread({}, rest))\n      }), /*#__PURE__*/_jsx(_JSXStyle, {\n        id: \"2262278230\",\n        children: [\".root.jsx-2262278230{padding-top:20px;}\", \".repo-basic.jsx-2262278230{padding:20px;border:1px solid #eee;margin-bottom:20px;border-radius:5px;}\", \".tab.jsx-2262278230+.tab.jsx-2262278230{margin-left:20px;}\"]\n      })]\n    });\n  } // 注意在客户端第一次渲染的时候，是不会调用这个 getInitialProps ，所以不会在里面进行 cache\n\n\n  WithDetail.getInitialProps = async ctx => {\n    const {\n      owner,\n      name\n    } = ctx.query;\n    const full_name = `${owner}/${name}`;\n    let pageData = {};\n\n    if (Comp.getInitialProps) {\n      pageData = await Comp.getInitialProps(ctx);\n    }\n\n    if (getCache(full_name)) {\n      return _objectSpread({\n        repoBasic: getCache(full_name)\n      }, pageData);\n    }\n\n    const repoBasic = await api.request({\n      url: `/repos/${owner}/${name}`\n    }, ctx.req, ctx.res);\n    return _objectSpread({\n      repoBasic: repoBasic.data\n    }, pageData);\n  };\n\n  return withRouter(WithDetail);\n} // export default withRouter(withRepo);","map":null,"metadata":{},"sourceType":"module"}